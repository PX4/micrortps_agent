// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file offboard_control_mode.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "offboard_control_mode.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

offboard_control_mode::offboard_control_mode()
{
    // m_timestamp_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3b0143d3
    m_timestamp_ = 0;
    // m_ignore_thrust_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5a8e6209
    m_ignore_thrust_ = false;
    // m_ignore_attitude_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4b4523f8
    m_ignore_attitude_ = false;
    // m_ignore_bodyrate_x_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@731a74c
    m_ignore_bodyrate_x_ = false;
    // m_ignore_bodyrate_y_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@369f73a2
    m_ignore_bodyrate_y_ = false;
    // m_ignore_bodyrate_z_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1f28c152
    m_ignore_bodyrate_z_ = false;
    // m_ignore_position_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3a5ed7a6
    m_ignore_position_ = false;
    // m_ignore_velocity_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6325a3ee
    m_ignore_velocity_ = false;
    // m_ignore_acceleration_force_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1d16f93d
    m_ignore_acceleration_force_ = false;
    // m_ignore_alt_hold_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@67b92f0a
    m_ignore_alt_hold_ = false;

}

offboard_control_mode::~offboard_control_mode()
{










}

offboard_control_mode::offboard_control_mode(const offboard_control_mode &x)
{
    m_timestamp_ = x.m_timestamp_;
    m_ignore_thrust_ = x.m_ignore_thrust_;
    m_ignore_attitude_ = x.m_ignore_attitude_;
    m_ignore_bodyrate_x_ = x.m_ignore_bodyrate_x_;
    m_ignore_bodyrate_y_ = x.m_ignore_bodyrate_y_;
    m_ignore_bodyrate_z_ = x.m_ignore_bodyrate_z_;
    m_ignore_position_ = x.m_ignore_position_;
    m_ignore_velocity_ = x.m_ignore_velocity_;
    m_ignore_acceleration_force_ = x.m_ignore_acceleration_force_;
    m_ignore_alt_hold_ = x.m_ignore_alt_hold_;
}

offboard_control_mode::offboard_control_mode(offboard_control_mode &&x)
{
    m_timestamp_ = x.m_timestamp_;
    m_ignore_thrust_ = x.m_ignore_thrust_;
    m_ignore_attitude_ = x.m_ignore_attitude_;
    m_ignore_bodyrate_x_ = x.m_ignore_bodyrate_x_;
    m_ignore_bodyrate_y_ = x.m_ignore_bodyrate_y_;
    m_ignore_bodyrate_z_ = x.m_ignore_bodyrate_z_;
    m_ignore_position_ = x.m_ignore_position_;
    m_ignore_velocity_ = x.m_ignore_velocity_;
    m_ignore_acceleration_force_ = x.m_ignore_acceleration_force_;
    m_ignore_alt_hold_ = x.m_ignore_alt_hold_;
}

offboard_control_mode& offboard_control_mode::operator=(const offboard_control_mode &x)
{

    m_timestamp_ = x.m_timestamp_;
    m_ignore_thrust_ = x.m_ignore_thrust_;
    m_ignore_attitude_ = x.m_ignore_attitude_;
    m_ignore_bodyrate_x_ = x.m_ignore_bodyrate_x_;
    m_ignore_bodyrate_y_ = x.m_ignore_bodyrate_y_;
    m_ignore_bodyrate_z_ = x.m_ignore_bodyrate_z_;
    m_ignore_position_ = x.m_ignore_position_;
    m_ignore_velocity_ = x.m_ignore_velocity_;
    m_ignore_acceleration_force_ = x.m_ignore_acceleration_force_;
    m_ignore_alt_hold_ = x.m_ignore_alt_hold_;

    return *this;
}

offboard_control_mode& offboard_control_mode::operator=(offboard_control_mode &&x)
{

    m_timestamp_ = x.m_timestamp_;
    m_ignore_thrust_ = x.m_ignore_thrust_;
    m_ignore_attitude_ = x.m_ignore_attitude_;
    m_ignore_bodyrate_x_ = x.m_ignore_bodyrate_x_;
    m_ignore_bodyrate_y_ = x.m_ignore_bodyrate_y_;
    m_ignore_bodyrate_z_ = x.m_ignore_bodyrate_z_;
    m_ignore_position_ = x.m_ignore_position_;
    m_ignore_velocity_ = x.m_ignore_velocity_;
    m_ignore_acceleration_force_ = x.m_ignore_acceleration_force_;
    m_ignore_alt_hold_ = x.m_ignore_alt_hold_;

    return *this;
}

size_t offboard_control_mode::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t offboard_control_mode::getCdrSerializedSize(const offboard_control_mode& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void offboard_control_mode::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_timestamp_;
    scdr << m_ignore_thrust_;
    scdr << m_ignore_attitude_;
    scdr << m_ignore_bodyrate_x_;
    scdr << m_ignore_bodyrate_y_;
    scdr << m_ignore_bodyrate_z_;
    scdr << m_ignore_position_;
    scdr << m_ignore_velocity_;
    scdr << m_ignore_acceleration_force_;
    scdr << m_ignore_alt_hold_;
}

void offboard_control_mode::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_timestamp_;
    dcdr >> m_ignore_thrust_;
    dcdr >> m_ignore_attitude_;
    dcdr >> m_ignore_bodyrate_x_;
    dcdr >> m_ignore_bodyrate_y_;
    dcdr >> m_ignore_bodyrate_z_;
    dcdr >> m_ignore_position_;
    dcdr >> m_ignore_velocity_;
    dcdr >> m_ignore_acceleration_force_;
    dcdr >> m_ignore_alt_hold_;
}

/*!
 * @brief This function sets a value in member timestamp_
 * @param _timestamp_ New value for member timestamp_
 */
void offboard_control_mode::timestamp_(uint64_t _timestamp_)
{
m_timestamp_ = _timestamp_;
}

/*!
 * @brief This function returns the value of member timestamp_
 * @return Value of member timestamp_
 */
uint64_t offboard_control_mode::timestamp_() const
{
    return m_timestamp_;
}

/*!
 * @brief This function returns a reference to member timestamp_
 * @return Reference to member timestamp_
 */
uint64_t& offboard_control_mode::timestamp_()
{
    return m_timestamp_;
}

/*!
 * @brief This function sets a value in member ignore_thrust_
 * @param _ignore_thrust_ New value for member ignore_thrust_
 */
void offboard_control_mode::ignore_thrust_(bool _ignore_thrust_)
{
m_ignore_thrust_ = _ignore_thrust_;
}

/*!
 * @brief This function returns the value of member ignore_thrust_
 * @return Value of member ignore_thrust_
 */
bool offboard_control_mode::ignore_thrust_() const
{
    return m_ignore_thrust_;
}

/*!
 * @brief This function returns a reference to member ignore_thrust_
 * @return Reference to member ignore_thrust_
 */
bool& offboard_control_mode::ignore_thrust_()
{
    return m_ignore_thrust_;
}

/*!
 * @brief This function sets a value in member ignore_attitude_
 * @param _ignore_attitude_ New value for member ignore_attitude_
 */
void offboard_control_mode::ignore_attitude_(bool _ignore_attitude_)
{
m_ignore_attitude_ = _ignore_attitude_;
}

/*!
 * @brief This function returns the value of member ignore_attitude_
 * @return Value of member ignore_attitude_
 */
bool offboard_control_mode::ignore_attitude_() const
{
    return m_ignore_attitude_;
}

/*!
 * @brief This function returns a reference to member ignore_attitude_
 * @return Reference to member ignore_attitude_
 */
bool& offboard_control_mode::ignore_attitude_()
{
    return m_ignore_attitude_;
}

/*!
 * @brief This function sets a value in member ignore_bodyrate_x_
 * @param _ignore_bodyrate_x_ New value for member ignore_bodyrate_x_
 */
void offboard_control_mode::ignore_bodyrate_x_(bool _ignore_bodyrate_x_)
{
m_ignore_bodyrate_x_ = _ignore_bodyrate_x_;
}

/*!
 * @brief This function returns the value of member ignore_bodyrate_x_
 * @return Value of member ignore_bodyrate_x_
 */
bool offboard_control_mode::ignore_bodyrate_x_() const
{
    return m_ignore_bodyrate_x_;
}

/*!
 * @brief This function returns a reference to member ignore_bodyrate_x_
 * @return Reference to member ignore_bodyrate_x_
 */
bool& offboard_control_mode::ignore_bodyrate_x_()
{
    return m_ignore_bodyrate_x_;
}

/*!
 * @brief This function sets a value in member ignore_bodyrate_y_
 * @param _ignore_bodyrate_y_ New value for member ignore_bodyrate_y_
 */
void offboard_control_mode::ignore_bodyrate_y_(bool _ignore_bodyrate_y_)
{
m_ignore_bodyrate_y_ = _ignore_bodyrate_y_;
}

/*!
 * @brief This function returns the value of member ignore_bodyrate_y_
 * @return Value of member ignore_bodyrate_y_
 */
bool offboard_control_mode::ignore_bodyrate_y_() const
{
    return m_ignore_bodyrate_y_;
}

/*!
 * @brief This function returns a reference to member ignore_bodyrate_y_
 * @return Reference to member ignore_bodyrate_y_
 */
bool& offboard_control_mode::ignore_bodyrate_y_()
{
    return m_ignore_bodyrate_y_;
}

/*!
 * @brief This function sets a value in member ignore_bodyrate_z_
 * @param _ignore_bodyrate_z_ New value for member ignore_bodyrate_z_
 */
void offboard_control_mode::ignore_bodyrate_z_(bool _ignore_bodyrate_z_)
{
m_ignore_bodyrate_z_ = _ignore_bodyrate_z_;
}

/*!
 * @brief This function returns the value of member ignore_bodyrate_z_
 * @return Value of member ignore_bodyrate_z_
 */
bool offboard_control_mode::ignore_bodyrate_z_() const
{
    return m_ignore_bodyrate_z_;
}

/*!
 * @brief This function returns a reference to member ignore_bodyrate_z_
 * @return Reference to member ignore_bodyrate_z_
 */
bool& offboard_control_mode::ignore_bodyrate_z_()
{
    return m_ignore_bodyrate_z_;
}

/*!
 * @brief This function sets a value in member ignore_position_
 * @param _ignore_position_ New value for member ignore_position_
 */
void offboard_control_mode::ignore_position_(bool _ignore_position_)
{
m_ignore_position_ = _ignore_position_;
}

/*!
 * @brief This function returns the value of member ignore_position_
 * @return Value of member ignore_position_
 */
bool offboard_control_mode::ignore_position_() const
{
    return m_ignore_position_;
}

/*!
 * @brief This function returns a reference to member ignore_position_
 * @return Reference to member ignore_position_
 */
bool& offboard_control_mode::ignore_position_()
{
    return m_ignore_position_;
}

/*!
 * @brief This function sets a value in member ignore_velocity_
 * @param _ignore_velocity_ New value for member ignore_velocity_
 */
void offboard_control_mode::ignore_velocity_(bool _ignore_velocity_)
{
m_ignore_velocity_ = _ignore_velocity_;
}

/*!
 * @brief This function returns the value of member ignore_velocity_
 * @return Value of member ignore_velocity_
 */
bool offboard_control_mode::ignore_velocity_() const
{
    return m_ignore_velocity_;
}

/*!
 * @brief This function returns a reference to member ignore_velocity_
 * @return Reference to member ignore_velocity_
 */
bool& offboard_control_mode::ignore_velocity_()
{
    return m_ignore_velocity_;
}

/*!
 * @brief This function sets a value in member ignore_acceleration_force_
 * @param _ignore_acceleration_force_ New value for member ignore_acceleration_force_
 */
void offboard_control_mode::ignore_acceleration_force_(bool _ignore_acceleration_force_)
{
m_ignore_acceleration_force_ = _ignore_acceleration_force_;
}

/*!
 * @brief This function returns the value of member ignore_acceleration_force_
 * @return Value of member ignore_acceleration_force_
 */
bool offboard_control_mode::ignore_acceleration_force_() const
{
    return m_ignore_acceleration_force_;
}

/*!
 * @brief This function returns a reference to member ignore_acceleration_force_
 * @return Reference to member ignore_acceleration_force_
 */
bool& offboard_control_mode::ignore_acceleration_force_()
{
    return m_ignore_acceleration_force_;
}

/*!
 * @brief This function sets a value in member ignore_alt_hold_
 * @param _ignore_alt_hold_ New value for member ignore_alt_hold_
 */
void offboard_control_mode::ignore_alt_hold_(bool _ignore_alt_hold_)
{
m_ignore_alt_hold_ = _ignore_alt_hold_;
}

/*!
 * @brief This function returns the value of member ignore_alt_hold_
 * @return Value of member ignore_alt_hold_
 */
bool offboard_control_mode::ignore_alt_hold_() const
{
    return m_ignore_alt_hold_;
}

/*!
 * @brief This function returns a reference to member ignore_alt_hold_
 * @return Reference to member ignore_alt_hold_
 */
bool& offboard_control_mode::ignore_alt_hold_()
{
    return m_ignore_alt_hold_;
}


size_t offboard_control_mode::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;













    return current_align;
}

bool offboard_control_mode::isKeyDefined()
{
   return false;
}

void offboard_control_mode::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
     
     
     
     
     
     
     
     
}
