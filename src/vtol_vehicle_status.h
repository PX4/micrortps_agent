// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file vtol_vehicle_status.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _VTOL_VEHICLE_STATUS_H_
#define _VTOL_VEHICLE_STATUS_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(vtol_vehicle_status_SOURCE)
#define vtol_vehicle_status_DllAPI __declspec( dllexport )
#else
#define vtol_vehicle_status_DllAPI __declspec( dllimport )
#endif // vtol_vehicle_status_SOURCE
#else
#define vtol_vehicle_status_DllAPI
#endif
#else
#define vtol_vehicle_status_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}


const uint8_t vtol_vehicle_status__VEHICLE_VTOL_STATE_UNDEFINED = 0;
const uint8_t vtol_vehicle_status__VEHICLE_VTOL_STATE_TRANSITION_TO_FW = 1;
const uint8_t vtol_vehicle_status__VEHICLE_VTOL_STATE_TRANSITION_TO_MC = 2;
const uint8_t vtol_vehicle_status__VEHICLE_VTOL_STATE_MC = 3;
const uint8_t vtol_vehicle_status__VEHICLE_VTOL_STATE_FW = 4;
/*!
 * @brief This class represents the structure vtol_vehicle_status defined by the user in the IDL file.
 * @ingroup VTOL_VEHICLE_STATUS
 */
class vtol_vehicle_status
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport vtol_vehicle_status();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~vtol_vehicle_status();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object vtol_vehicle_status that will be copied.
     */
    eProsima_user_DllExport vtol_vehicle_status(const vtol_vehicle_status &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object vtol_vehicle_status that will be copied.
     */
    eProsima_user_DllExport vtol_vehicle_status(vtol_vehicle_status &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object vtol_vehicle_status that will be copied.
     */
    eProsima_user_DllExport vtol_vehicle_status& operator=(const vtol_vehicle_status &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object vtol_vehicle_status that will be copied.
     */
    eProsima_user_DllExport vtol_vehicle_status& operator=(vtol_vehicle_status &&x);

    /*!
     * @brief This function sets a value in member timestamp_
     * @param _timestamp_ New value for member timestamp_
     */
    eProsima_user_DllExport void timestamp_(uint64_t _timestamp_);

    /*!
     * @brief This function returns the value of member timestamp_
     * @return Value of member timestamp_
     */
    eProsima_user_DllExport uint64_t timestamp_() const;

    /*!
     * @brief This function returns a reference to member timestamp_
     * @return Reference to member timestamp_
     */
    eProsima_user_DllExport uint64_t& timestamp_();

    /*!
     * @brief This function sets a value in member vtol_in_rw_mode_
     * @param _vtol_in_rw_mode_ New value for member vtol_in_rw_mode_
     */
    eProsima_user_DllExport void vtol_in_rw_mode_(bool _vtol_in_rw_mode_);

    /*!
     * @brief This function returns the value of member vtol_in_rw_mode_
     * @return Value of member vtol_in_rw_mode_
     */
    eProsima_user_DllExport bool vtol_in_rw_mode_() const;

    /*!
     * @brief This function returns a reference to member vtol_in_rw_mode_
     * @return Reference to member vtol_in_rw_mode_
     */
    eProsima_user_DllExport bool& vtol_in_rw_mode_();

    /*!
     * @brief This function sets a value in member vtol_in_trans_mode_
     * @param _vtol_in_trans_mode_ New value for member vtol_in_trans_mode_
     */
    eProsima_user_DllExport void vtol_in_trans_mode_(bool _vtol_in_trans_mode_);

    /*!
     * @brief This function returns the value of member vtol_in_trans_mode_
     * @return Value of member vtol_in_trans_mode_
     */
    eProsima_user_DllExport bool vtol_in_trans_mode_() const;

    /*!
     * @brief This function returns a reference to member vtol_in_trans_mode_
     * @return Reference to member vtol_in_trans_mode_
     */
    eProsima_user_DllExport bool& vtol_in_trans_mode_();

    /*!
     * @brief This function sets a value in member in_transition_to_fw_
     * @param _in_transition_to_fw_ New value for member in_transition_to_fw_
     */
    eProsima_user_DllExport void in_transition_to_fw_(bool _in_transition_to_fw_);

    /*!
     * @brief This function returns the value of member in_transition_to_fw_
     * @return Value of member in_transition_to_fw_
     */
    eProsima_user_DllExport bool in_transition_to_fw_() const;

    /*!
     * @brief This function returns a reference to member in_transition_to_fw_
     * @return Reference to member in_transition_to_fw_
     */
    eProsima_user_DllExport bool& in_transition_to_fw_();

    /*!
     * @brief This function sets a value in member vtol_transition_failsafe_
     * @param _vtol_transition_failsafe_ New value for member vtol_transition_failsafe_
     */
    eProsima_user_DllExport void vtol_transition_failsafe_(bool _vtol_transition_failsafe_);

    /*!
     * @brief This function returns the value of member vtol_transition_failsafe_
     * @return Value of member vtol_transition_failsafe_
     */
    eProsima_user_DllExport bool vtol_transition_failsafe_() const;

    /*!
     * @brief This function returns a reference to member vtol_transition_failsafe_
     * @return Reference to member vtol_transition_failsafe_
     */
    eProsima_user_DllExport bool& vtol_transition_failsafe_();

    /*!
     * @brief This function sets a value in member fw_permanent_stab_
     * @param _fw_permanent_stab_ New value for member fw_permanent_stab_
     */
    eProsima_user_DllExport void fw_permanent_stab_(bool _fw_permanent_stab_);

    /*!
     * @brief This function returns the value of member fw_permanent_stab_
     * @return Value of member fw_permanent_stab_
     */
    eProsima_user_DllExport bool fw_permanent_stab_() const;

    /*!
     * @brief This function returns a reference to member fw_permanent_stab_
     * @return Reference to member fw_permanent_stab_
     */
    eProsima_user_DllExport bool& fw_permanent_stab_();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const vtol_vehicle_status& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    uint64_t m_timestamp_;
    bool m_vtol_in_rw_mode_;
    bool m_vtol_in_trans_mode_;
    bool m_in_transition_to_fw_;
    bool m_vtol_transition_failsafe_;
    bool m_fw_permanent_stab_;
};

#endif // _VTOL_VEHICLE_STATUS_H_