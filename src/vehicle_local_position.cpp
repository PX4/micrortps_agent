// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file vehicle_local_position.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "vehicle_local_position.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>





vehicle_local_position::vehicle_local_position()
{
    // m_timestamp_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@26a7b76d
    m_timestamp_ = 0;
    // m_timestamp_sample_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4abdb505
    m_timestamp_sample_ = 0;
    // m_xy_valid_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7ce6a65d
    m_xy_valid_ = false;
    // m_z_valid_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1500955a
    m_z_valid_ = false;
    // m_v_xy_valid_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@e874448
    m_v_xy_valid_ = false;
    // m_v_z_valid_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@29b5cd00
    m_v_z_valid_ = false;
    // m_x_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@60285225
    m_x_ = 0.0;
    // m_y_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7113b13f
    m_y_ = 0.0;
    // m_z_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@45820e51
    m_z_ = 0.0;
    // m_delta_xy com.eprosima.idl.parser.typecode.AliasTypeCode@42d8062c
    memset(&m_delta_xy, 0, (2) * 4);
    // m_xy_reset_counter_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6043cd28
    m_xy_reset_counter_ = 0;
    // m_delta_z_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@cb51256
    m_delta_z_ = 0.0;
    // m_z_reset_counter_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@59906517
    m_z_reset_counter_ = 0;
    // m_vx_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5bfbf16f
    m_vx_ = 0.0;
    // m_vy_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@25af5db5
    m_vy_ = 0.0;
    // m_vz_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5bcea91b
    m_vz_ = 0.0;
    // m_z_deriv_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@27f723
    m_z_deriv_ = 0.0;
    // m_delta_vxy com.eprosima.idl.parser.typecode.AliasTypeCode@42d8062c
    memset(&m_delta_vxy, 0, (2) * 4);
    // m_vxy_reset_counter_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@44c8afef
    m_vxy_reset_counter_ = 0;
    // m_delta_vz_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7b69c6ba
    m_delta_vz_ = 0.0;
    // m_vz_reset_counter_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@46daef40
    m_vz_reset_counter_ = 0;
    // m_ax_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@12f41634
    m_ax_ = 0.0;
    // m_ay_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@13c27452
    m_ay_ = 0.0;
    // m_az_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@262b2c86
    m_az_ = 0.0;
    // m_heading_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@371a67ec
    m_heading_ = 0.0;
    // m_delta_heading_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5ed828d
    m_delta_heading_ = 0.0;
    // m_heading_reset_counter_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@50d0686
    m_heading_reset_counter_ = 0;
    // m_xy_global_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7a3d45bd
    m_xy_global_ = false;
    // m_z_global_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1e7c7811
    m_z_global_ = false;
    // m_ref_timestamp_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@77ec78b9
    m_ref_timestamp_ = 0;
    // m_ref_lat_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1a3869f4
    m_ref_lat_ = 0.0;
    // m_ref_lon_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@a38d7a3
    m_ref_lon_ = 0.0;
    // m_ref_alt_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@77f99a05
    m_ref_alt_ = 0.0;
    // m_dist_bottom_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@63440df3
    m_dist_bottom_ = 0.0;
    // m_dist_bottom_valid_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3aeaafa6
    m_dist_bottom_valid_ = false;
    // m_dist_bottom_sensor_bitfield_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@76a3e297
    m_dist_bottom_sensor_bitfield_ = 0;
    // m_eph_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4d3167f4
    m_eph_ = 0.0;
    // m_epv_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@ed9d034
    m_epv_ = 0.0;
    // m_evh_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6121c9d6
    m_evh_ = 0.0;
    // m_evv_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@87f383f
    m_evv_ = 0.0;
    // m_vxy_max_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4eb7f003
    m_vxy_max_ = 0.0;
    // m_vz_max_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@eafc191
    m_vz_max_ = 0.0;
    // m_hagl_min_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@612fc6eb
    m_hagl_min_ = 0.0;
    // m_hagl_max_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1060b431
    m_hagl_max_ = 0.0;

}

vehicle_local_position::~vehicle_local_position()
{












































}

vehicle_local_position::vehicle_local_position(const vehicle_local_position &x)
{
    m_timestamp_ = x.m_timestamp_;
    m_timestamp_sample_ = x.m_timestamp_sample_;
    m_xy_valid_ = x.m_xy_valid_;
    m_z_valid_ = x.m_z_valid_;
    m_v_xy_valid_ = x.m_v_xy_valid_;
    m_v_z_valid_ = x.m_v_z_valid_;
    m_x_ = x.m_x_;
    m_y_ = x.m_y_;
    m_z_ = x.m_z_;
    m_delta_xy = x.m_delta_xy;
    m_xy_reset_counter_ = x.m_xy_reset_counter_;
    m_delta_z_ = x.m_delta_z_;
    m_z_reset_counter_ = x.m_z_reset_counter_;
    m_vx_ = x.m_vx_;
    m_vy_ = x.m_vy_;
    m_vz_ = x.m_vz_;
    m_z_deriv_ = x.m_z_deriv_;
    m_delta_vxy = x.m_delta_vxy;
    m_vxy_reset_counter_ = x.m_vxy_reset_counter_;
    m_delta_vz_ = x.m_delta_vz_;
    m_vz_reset_counter_ = x.m_vz_reset_counter_;
    m_ax_ = x.m_ax_;
    m_ay_ = x.m_ay_;
    m_az_ = x.m_az_;
    m_heading_ = x.m_heading_;
    m_delta_heading_ = x.m_delta_heading_;
    m_heading_reset_counter_ = x.m_heading_reset_counter_;
    m_xy_global_ = x.m_xy_global_;
    m_z_global_ = x.m_z_global_;
    m_ref_timestamp_ = x.m_ref_timestamp_;
    m_ref_lat_ = x.m_ref_lat_;
    m_ref_lon_ = x.m_ref_lon_;
    m_ref_alt_ = x.m_ref_alt_;
    m_dist_bottom_ = x.m_dist_bottom_;
    m_dist_bottom_valid_ = x.m_dist_bottom_valid_;
    m_dist_bottom_sensor_bitfield_ = x.m_dist_bottom_sensor_bitfield_;
    m_eph_ = x.m_eph_;
    m_epv_ = x.m_epv_;
    m_evh_ = x.m_evh_;
    m_evv_ = x.m_evv_;
    m_vxy_max_ = x.m_vxy_max_;
    m_vz_max_ = x.m_vz_max_;
    m_hagl_min_ = x.m_hagl_min_;
    m_hagl_max_ = x.m_hagl_max_;
}

vehicle_local_position::vehicle_local_position(vehicle_local_position &&x)
{
    m_timestamp_ = x.m_timestamp_;
    m_timestamp_sample_ = x.m_timestamp_sample_;
    m_xy_valid_ = x.m_xy_valid_;
    m_z_valid_ = x.m_z_valid_;
    m_v_xy_valid_ = x.m_v_xy_valid_;
    m_v_z_valid_ = x.m_v_z_valid_;
    m_x_ = x.m_x_;
    m_y_ = x.m_y_;
    m_z_ = x.m_z_;
    m_delta_xy = std::move(x.m_delta_xy);
    m_xy_reset_counter_ = x.m_xy_reset_counter_;
    m_delta_z_ = x.m_delta_z_;
    m_z_reset_counter_ = x.m_z_reset_counter_;
    m_vx_ = x.m_vx_;
    m_vy_ = x.m_vy_;
    m_vz_ = x.m_vz_;
    m_z_deriv_ = x.m_z_deriv_;
    m_delta_vxy = std::move(x.m_delta_vxy);
    m_vxy_reset_counter_ = x.m_vxy_reset_counter_;
    m_delta_vz_ = x.m_delta_vz_;
    m_vz_reset_counter_ = x.m_vz_reset_counter_;
    m_ax_ = x.m_ax_;
    m_ay_ = x.m_ay_;
    m_az_ = x.m_az_;
    m_heading_ = x.m_heading_;
    m_delta_heading_ = x.m_delta_heading_;
    m_heading_reset_counter_ = x.m_heading_reset_counter_;
    m_xy_global_ = x.m_xy_global_;
    m_z_global_ = x.m_z_global_;
    m_ref_timestamp_ = x.m_ref_timestamp_;
    m_ref_lat_ = x.m_ref_lat_;
    m_ref_lon_ = x.m_ref_lon_;
    m_ref_alt_ = x.m_ref_alt_;
    m_dist_bottom_ = x.m_dist_bottom_;
    m_dist_bottom_valid_ = x.m_dist_bottom_valid_;
    m_dist_bottom_sensor_bitfield_ = x.m_dist_bottom_sensor_bitfield_;
    m_eph_ = x.m_eph_;
    m_epv_ = x.m_epv_;
    m_evh_ = x.m_evh_;
    m_evv_ = x.m_evv_;
    m_vxy_max_ = x.m_vxy_max_;
    m_vz_max_ = x.m_vz_max_;
    m_hagl_min_ = x.m_hagl_min_;
    m_hagl_max_ = x.m_hagl_max_;
}

vehicle_local_position& vehicle_local_position::operator=(const vehicle_local_position &x)
{

    m_timestamp_ = x.m_timestamp_;
    m_timestamp_sample_ = x.m_timestamp_sample_;
    m_xy_valid_ = x.m_xy_valid_;
    m_z_valid_ = x.m_z_valid_;
    m_v_xy_valid_ = x.m_v_xy_valid_;
    m_v_z_valid_ = x.m_v_z_valid_;
    m_x_ = x.m_x_;
    m_y_ = x.m_y_;
    m_z_ = x.m_z_;
    m_delta_xy = x.m_delta_xy;
    m_xy_reset_counter_ = x.m_xy_reset_counter_;
    m_delta_z_ = x.m_delta_z_;
    m_z_reset_counter_ = x.m_z_reset_counter_;
    m_vx_ = x.m_vx_;
    m_vy_ = x.m_vy_;
    m_vz_ = x.m_vz_;
    m_z_deriv_ = x.m_z_deriv_;
    m_delta_vxy = x.m_delta_vxy;
    m_vxy_reset_counter_ = x.m_vxy_reset_counter_;
    m_delta_vz_ = x.m_delta_vz_;
    m_vz_reset_counter_ = x.m_vz_reset_counter_;
    m_ax_ = x.m_ax_;
    m_ay_ = x.m_ay_;
    m_az_ = x.m_az_;
    m_heading_ = x.m_heading_;
    m_delta_heading_ = x.m_delta_heading_;
    m_heading_reset_counter_ = x.m_heading_reset_counter_;
    m_xy_global_ = x.m_xy_global_;
    m_z_global_ = x.m_z_global_;
    m_ref_timestamp_ = x.m_ref_timestamp_;
    m_ref_lat_ = x.m_ref_lat_;
    m_ref_lon_ = x.m_ref_lon_;
    m_ref_alt_ = x.m_ref_alt_;
    m_dist_bottom_ = x.m_dist_bottom_;
    m_dist_bottom_valid_ = x.m_dist_bottom_valid_;
    m_dist_bottom_sensor_bitfield_ = x.m_dist_bottom_sensor_bitfield_;
    m_eph_ = x.m_eph_;
    m_epv_ = x.m_epv_;
    m_evh_ = x.m_evh_;
    m_evv_ = x.m_evv_;
    m_vxy_max_ = x.m_vxy_max_;
    m_vz_max_ = x.m_vz_max_;
    m_hagl_min_ = x.m_hagl_min_;
    m_hagl_max_ = x.m_hagl_max_;

    return *this;
}

vehicle_local_position& vehicle_local_position::operator=(vehicle_local_position &&x)
{

    m_timestamp_ = x.m_timestamp_;
    m_timestamp_sample_ = x.m_timestamp_sample_;
    m_xy_valid_ = x.m_xy_valid_;
    m_z_valid_ = x.m_z_valid_;
    m_v_xy_valid_ = x.m_v_xy_valid_;
    m_v_z_valid_ = x.m_v_z_valid_;
    m_x_ = x.m_x_;
    m_y_ = x.m_y_;
    m_z_ = x.m_z_;
    m_delta_xy = std::move(x.m_delta_xy);
    m_xy_reset_counter_ = x.m_xy_reset_counter_;
    m_delta_z_ = x.m_delta_z_;
    m_z_reset_counter_ = x.m_z_reset_counter_;
    m_vx_ = x.m_vx_;
    m_vy_ = x.m_vy_;
    m_vz_ = x.m_vz_;
    m_z_deriv_ = x.m_z_deriv_;
    m_delta_vxy = std::move(x.m_delta_vxy);
    m_vxy_reset_counter_ = x.m_vxy_reset_counter_;
    m_delta_vz_ = x.m_delta_vz_;
    m_vz_reset_counter_ = x.m_vz_reset_counter_;
    m_ax_ = x.m_ax_;
    m_ay_ = x.m_ay_;
    m_az_ = x.m_az_;
    m_heading_ = x.m_heading_;
    m_delta_heading_ = x.m_delta_heading_;
    m_heading_reset_counter_ = x.m_heading_reset_counter_;
    m_xy_global_ = x.m_xy_global_;
    m_z_global_ = x.m_z_global_;
    m_ref_timestamp_ = x.m_ref_timestamp_;
    m_ref_lat_ = x.m_ref_lat_;
    m_ref_lon_ = x.m_ref_lon_;
    m_ref_alt_ = x.m_ref_alt_;
    m_dist_bottom_ = x.m_dist_bottom_;
    m_dist_bottom_valid_ = x.m_dist_bottom_valid_;
    m_dist_bottom_sensor_bitfield_ = x.m_dist_bottom_sensor_bitfield_;
    m_eph_ = x.m_eph_;
    m_epv_ = x.m_epv_;
    m_evh_ = x.m_evh_;
    m_evv_ = x.m_evv_;
    m_vxy_max_ = x.m_vxy_max_;
    m_vz_max_ = x.m_vz_max_;
    m_hagl_min_ = x.m_hagl_min_;
    m_hagl_max_ = x.m_hagl_max_;

    return *this;
}

size_t vehicle_local_position::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((2) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((2) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t vehicle_local_position::getCdrSerializedSize(const vehicle_local_position& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    if ((2) > 0)
    {
        current_alignment += ((2) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    if ((2) > 0)
    {
        current_alignment += ((2) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void vehicle_local_position::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_timestamp_;
    scdr << m_timestamp_sample_;
    scdr << m_xy_valid_;
    scdr << m_z_valid_;
    scdr << m_v_xy_valid_;
    scdr << m_v_z_valid_;
    scdr << m_x_;
    scdr << m_y_;
    scdr << m_z_;
    scdr << m_delta_xy;

    scdr << m_xy_reset_counter_;
    scdr << m_delta_z_;
    scdr << m_z_reset_counter_;
    scdr << m_vx_;
    scdr << m_vy_;
    scdr << m_vz_;
    scdr << m_z_deriv_;
    scdr << m_delta_vxy;

    scdr << m_vxy_reset_counter_;
    scdr << m_delta_vz_;
    scdr << m_vz_reset_counter_;
    scdr << m_ax_;
    scdr << m_ay_;
    scdr << m_az_;
    scdr << m_heading_;
    scdr << m_delta_heading_;
    scdr << m_heading_reset_counter_;
    scdr << m_xy_global_;
    scdr << m_z_global_;
    scdr << m_ref_timestamp_;
    scdr << m_ref_lat_;
    scdr << m_ref_lon_;
    scdr << m_ref_alt_;
    scdr << m_dist_bottom_;
    scdr << m_dist_bottom_valid_;
    scdr << m_dist_bottom_sensor_bitfield_;
    scdr << m_eph_;
    scdr << m_epv_;
    scdr << m_evh_;
    scdr << m_evv_;
    scdr << m_vxy_max_;
    scdr << m_vz_max_;
    scdr << m_hagl_min_;
    scdr << m_hagl_max_;
}

void vehicle_local_position::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_timestamp_;
    dcdr >> m_timestamp_sample_;
    dcdr >> m_xy_valid_;
    dcdr >> m_z_valid_;
    dcdr >> m_v_xy_valid_;
    dcdr >> m_v_z_valid_;
    dcdr >> m_x_;
    dcdr >> m_y_;
    dcdr >> m_z_;
    dcdr >> m_delta_xy;

    dcdr >> m_xy_reset_counter_;
    dcdr >> m_delta_z_;
    dcdr >> m_z_reset_counter_;
    dcdr >> m_vx_;
    dcdr >> m_vy_;
    dcdr >> m_vz_;
    dcdr >> m_z_deriv_;
    dcdr >> m_delta_vxy;

    dcdr >> m_vxy_reset_counter_;
    dcdr >> m_delta_vz_;
    dcdr >> m_vz_reset_counter_;
    dcdr >> m_ax_;
    dcdr >> m_ay_;
    dcdr >> m_az_;
    dcdr >> m_heading_;
    dcdr >> m_delta_heading_;
    dcdr >> m_heading_reset_counter_;
    dcdr >> m_xy_global_;
    dcdr >> m_z_global_;
    dcdr >> m_ref_timestamp_;
    dcdr >> m_ref_lat_;
    dcdr >> m_ref_lon_;
    dcdr >> m_ref_alt_;
    dcdr >> m_dist_bottom_;
    dcdr >> m_dist_bottom_valid_;
    dcdr >> m_dist_bottom_sensor_bitfield_;
    dcdr >> m_eph_;
    dcdr >> m_epv_;
    dcdr >> m_evh_;
    dcdr >> m_evv_;
    dcdr >> m_vxy_max_;
    dcdr >> m_vz_max_;
    dcdr >> m_hagl_min_;
    dcdr >> m_hagl_max_;
}

/*!
 * @brief This function sets a value in member timestamp_
 * @param _timestamp_ New value for member timestamp_
 */
void vehicle_local_position::timestamp_(uint64_t _timestamp_)
{
m_timestamp_ = _timestamp_;
}

/*!
 * @brief This function returns the value of member timestamp_
 * @return Value of member timestamp_
 */
uint64_t vehicle_local_position::timestamp_() const
{
    return m_timestamp_;
}

/*!
 * @brief This function returns a reference to member timestamp_
 * @return Reference to member timestamp_
 */
uint64_t& vehicle_local_position::timestamp_()
{
    return m_timestamp_;
}

/*!
 * @brief This function sets a value in member timestamp_sample_
 * @param _timestamp_sample_ New value for member timestamp_sample_
 */
void vehicle_local_position::timestamp_sample_(uint64_t _timestamp_sample_)
{
m_timestamp_sample_ = _timestamp_sample_;
}

/*!
 * @brief This function returns the value of member timestamp_sample_
 * @return Value of member timestamp_sample_
 */
uint64_t vehicle_local_position::timestamp_sample_() const
{
    return m_timestamp_sample_;
}

/*!
 * @brief This function returns a reference to member timestamp_sample_
 * @return Reference to member timestamp_sample_
 */
uint64_t& vehicle_local_position::timestamp_sample_()
{
    return m_timestamp_sample_;
}

/*!
 * @brief This function sets a value in member xy_valid_
 * @param _xy_valid_ New value for member xy_valid_
 */
void vehicle_local_position::xy_valid_(bool _xy_valid_)
{
m_xy_valid_ = _xy_valid_;
}

/*!
 * @brief This function returns the value of member xy_valid_
 * @return Value of member xy_valid_
 */
bool vehicle_local_position::xy_valid_() const
{
    return m_xy_valid_;
}

/*!
 * @brief This function returns a reference to member xy_valid_
 * @return Reference to member xy_valid_
 */
bool& vehicle_local_position::xy_valid_()
{
    return m_xy_valid_;
}

/*!
 * @brief This function sets a value in member z_valid_
 * @param _z_valid_ New value for member z_valid_
 */
void vehicle_local_position::z_valid_(bool _z_valid_)
{
m_z_valid_ = _z_valid_;
}

/*!
 * @brief This function returns the value of member z_valid_
 * @return Value of member z_valid_
 */
bool vehicle_local_position::z_valid_() const
{
    return m_z_valid_;
}

/*!
 * @brief This function returns a reference to member z_valid_
 * @return Reference to member z_valid_
 */
bool& vehicle_local_position::z_valid_()
{
    return m_z_valid_;
}

/*!
 * @brief This function sets a value in member v_xy_valid_
 * @param _v_xy_valid_ New value for member v_xy_valid_
 */
void vehicle_local_position::v_xy_valid_(bool _v_xy_valid_)
{
m_v_xy_valid_ = _v_xy_valid_;
}

/*!
 * @brief This function returns the value of member v_xy_valid_
 * @return Value of member v_xy_valid_
 */
bool vehicle_local_position::v_xy_valid_() const
{
    return m_v_xy_valid_;
}

/*!
 * @brief This function returns a reference to member v_xy_valid_
 * @return Reference to member v_xy_valid_
 */
bool& vehicle_local_position::v_xy_valid_()
{
    return m_v_xy_valid_;
}

/*!
 * @brief This function sets a value in member v_z_valid_
 * @param _v_z_valid_ New value for member v_z_valid_
 */
void vehicle_local_position::v_z_valid_(bool _v_z_valid_)
{
m_v_z_valid_ = _v_z_valid_;
}

/*!
 * @brief This function returns the value of member v_z_valid_
 * @return Value of member v_z_valid_
 */
bool vehicle_local_position::v_z_valid_() const
{
    return m_v_z_valid_;
}

/*!
 * @brief This function returns a reference to member v_z_valid_
 * @return Reference to member v_z_valid_
 */
bool& vehicle_local_position::v_z_valid_()
{
    return m_v_z_valid_;
}

/*!
 * @brief This function sets a value in member x_
 * @param _x_ New value for member x_
 */
void vehicle_local_position::x_(float _x_)
{
m_x_ = _x_;
}

/*!
 * @brief This function returns the value of member x_
 * @return Value of member x_
 */
float vehicle_local_position::x_() const
{
    return m_x_;
}

/*!
 * @brief This function returns a reference to member x_
 * @return Reference to member x_
 */
float& vehicle_local_position::x_()
{
    return m_x_;
}

/*!
 * @brief This function sets a value in member y_
 * @param _y_ New value for member y_
 */
void vehicle_local_position::y_(float _y_)
{
m_y_ = _y_;
}

/*!
 * @brief This function returns the value of member y_
 * @return Value of member y_
 */
float vehicle_local_position::y_() const
{
    return m_y_;
}

/*!
 * @brief This function returns a reference to member y_
 * @return Reference to member y_
 */
float& vehicle_local_position::y_()
{
    return m_y_;
}

/*!
 * @brief This function sets a value in member z_
 * @param _z_ New value for member z_
 */
void vehicle_local_position::z_(float _z_)
{
m_z_ = _z_;
}

/*!
 * @brief This function returns the value of member z_
 * @return Value of member z_
 */
float vehicle_local_position::z_() const
{
    return m_z_;
}

/*!
 * @brief This function returns a reference to member z_
 * @return Reference to member z_
 */
float& vehicle_local_position::z_()
{
    return m_z_;
}

/*!
 * @brief This function copies the value in member delta_xy
 * @param _delta_xy New value to be copied in member delta_xy
 */
void vehicle_local_position::delta_xy(const vehicle_local_position__float_array_2 &_delta_xy)
{
m_delta_xy = _delta_xy;
}

/*!
 * @brief This function moves the value in member delta_xy
 * @param _delta_xy New value to be moved in member delta_xy
 */
void vehicle_local_position::delta_xy(vehicle_local_position__float_array_2 &&_delta_xy)
{
m_delta_xy = std::move(_delta_xy);
}

/*!
 * @brief This function returns a constant reference to member delta_xy
 * @return Constant reference to member delta_xy
 */
const vehicle_local_position__float_array_2& vehicle_local_position::delta_xy() const
{
    return m_delta_xy;
}

/*!
 * @brief This function returns a reference to member delta_xy
 * @return Reference to member delta_xy
 */
vehicle_local_position__float_array_2& vehicle_local_position::delta_xy()
{
    return m_delta_xy;
}
/*!
 * @brief This function sets a value in member xy_reset_counter_
 * @param _xy_reset_counter_ New value for member xy_reset_counter_
 */
void vehicle_local_position::xy_reset_counter_(uint8_t _xy_reset_counter_)
{
m_xy_reset_counter_ = _xy_reset_counter_;
}

/*!
 * @brief This function returns the value of member xy_reset_counter_
 * @return Value of member xy_reset_counter_
 */
uint8_t vehicle_local_position::xy_reset_counter_() const
{
    return m_xy_reset_counter_;
}

/*!
 * @brief This function returns a reference to member xy_reset_counter_
 * @return Reference to member xy_reset_counter_
 */
uint8_t& vehicle_local_position::xy_reset_counter_()
{
    return m_xy_reset_counter_;
}

/*!
 * @brief This function sets a value in member delta_z_
 * @param _delta_z_ New value for member delta_z_
 */
void vehicle_local_position::delta_z_(float _delta_z_)
{
m_delta_z_ = _delta_z_;
}

/*!
 * @brief This function returns the value of member delta_z_
 * @return Value of member delta_z_
 */
float vehicle_local_position::delta_z_() const
{
    return m_delta_z_;
}

/*!
 * @brief This function returns a reference to member delta_z_
 * @return Reference to member delta_z_
 */
float& vehicle_local_position::delta_z_()
{
    return m_delta_z_;
}

/*!
 * @brief This function sets a value in member z_reset_counter_
 * @param _z_reset_counter_ New value for member z_reset_counter_
 */
void vehicle_local_position::z_reset_counter_(uint8_t _z_reset_counter_)
{
m_z_reset_counter_ = _z_reset_counter_;
}

/*!
 * @brief This function returns the value of member z_reset_counter_
 * @return Value of member z_reset_counter_
 */
uint8_t vehicle_local_position::z_reset_counter_() const
{
    return m_z_reset_counter_;
}

/*!
 * @brief This function returns a reference to member z_reset_counter_
 * @return Reference to member z_reset_counter_
 */
uint8_t& vehicle_local_position::z_reset_counter_()
{
    return m_z_reset_counter_;
}

/*!
 * @brief This function sets a value in member vx_
 * @param _vx_ New value for member vx_
 */
void vehicle_local_position::vx_(float _vx_)
{
m_vx_ = _vx_;
}

/*!
 * @brief This function returns the value of member vx_
 * @return Value of member vx_
 */
float vehicle_local_position::vx_() const
{
    return m_vx_;
}

/*!
 * @brief This function returns a reference to member vx_
 * @return Reference to member vx_
 */
float& vehicle_local_position::vx_()
{
    return m_vx_;
}

/*!
 * @brief This function sets a value in member vy_
 * @param _vy_ New value for member vy_
 */
void vehicle_local_position::vy_(float _vy_)
{
m_vy_ = _vy_;
}

/*!
 * @brief This function returns the value of member vy_
 * @return Value of member vy_
 */
float vehicle_local_position::vy_() const
{
    return m_vy_;
}

/*!
 * @brief This function returns a reference to member vy_
 * @return Reference to member vy_
 */
float& vehicle_local_position::vy_()
{
    return m_vy_;
}

/*!
 * @brief This function sets a value in member vz_
 * @param _vz_ New value for member vz_
 */
void vehicle_local_position::vz_(float _vz_)
{
m_vz_ = _vz_;
}

/*!
 * @brief This function returns the value of member vz_
 * @return Value of member vz_
 */
float vehicle_local_position::vz_() const
{
    return m_vz_;
}

/*!
 * @brief This function returns a reference to member vz_
 * @return Reference to member vz_
 */
float& vehicle_local_position::vz_()
{
    return m_vz_;
}

/*!
 * @brief This function sets a value in member z_deriv_
 * @param _z_deriv_ New value for member z_deriv_
 */
void vehicle_local_position::z_deriv_(float _z_deriv_)
{
m_z_deriv_ = _z_deriv_;
}

/*!
 * @brief This function returns the value of member z_deriv_
 * @return Value of member z_deriv_
 */
float vehicle_local_position::z_deriv_() const
{
    return m_z_deriv_;
}

/*!
 * @brief This function returns a reference to member z_deriv_
 * @return Reference to member z_deriv_
 */
float& vehicle_local_position::z_deriv_()
{
    return m_z_deriv_;
}

/*!
 * @brief This function copies the value in member delta_vxy
 * @param _delta_vxy New value to be copied in member delta_vxy
 */
void vehicle_local_position::delta_vxy(const vehicle_local_position__float_array_2 &_delta_vxy)
{
m_delta_vxy = _delta_vxy;
}

/*!
 * @brief This function moves the value in member delta_vxy
 * @param _delta_vxy New value to be moved in member delta_vxy
 */
void vehicle_local_position::delta_vxy(vehicle_local_position__float_array_2 &&_delta_vxy)
{
m_delta_vxy = std::move(_delta_vxy);
}

/*!
 * @brief This function returns a constant reference to member delta_vxy
 * @return Constant reference to member delta_vxy
 */
const vehicle_local_position__float_array_2& vehicle_local_position::delta_vxy() const
{
    return m_delta_vxy;
}

/*!
 * @brief This function returns a reference to member delta_vxy
 * @return Reference to member delta_vxy
 */
vehicle_local_position__float_array_2& vehicle_local_position::delta_vxy()
{
    return m_delta_vxy;
}
/*!
 * @brief This function sets a value in member vxy_reset_counter_
 * @param _vxy_reset_counter_ New value for member vxy_reset_counter_
 */
void vehicle_local_position::vxy_reset_counter_(uint8_t _vxy_reset_counter_)
{
m_vxy_reset_counter_ = _vxy_reset_counter_;
}

/*!
 * @brief This function returns the value of member vxy_reset_counter_
 * @return Value of member vxy_reset_counter_
 */
uint8_t vehicle_local_position::vxy_reset_counter_() const
{
    return m_vxy_reset_counter_;
}

/*!
 * @brief This function returns a reference to member vxy_reset_counter_
 * @return Reference to member vxy_reset_counter_
 */
uint8_t& vehicle_local_position::vxy_reset_counter_()
{
    return m_vxy_reset_counter_;
}

/*!
 * @brief This function sets a value in member delta_vz_
 * @param _delta_vz_ New value for member delta_vz_
 */
void vehicle_local_position::delta_vz_(float _delta_vz_)
{
m_delta_vz_ = _delta_vz_;
}

/*!
 * @brief This function returns the value of member delta_vz_
 * @return Value of member delta_vz_
 */
float vehicle_local_position::delta_vz_() const
{
    return m_delta_vz_;
}

/*!
 * @brief This function returns a reference to member delta_vz_
 * @return Reference to member delta_vz_
 */
float& vehicle_local_position::delta_vz_()
{
    return m_delta_vz_;
}

/*!
 * @brief This function sets a value in member vz_reset_counter_
 * @param _vz_reset_counter_ New value for member vz_reset_counter_
 */
void vehicle_local_position::vz_reset_counter_(uint8_t _vz_reset_counter_)
{
m_vz_reset_counter_ = _vz_reset_counter_;
}

/*!
 * @brief This function returns the value of member vz_reset_counter_
 * @return Value of member vz_reset_counter_
 */
uint8_t vehicle_local_position::vz_reset_counter_() const
{
    return m_vz_reset_counter_;
}

/*!
 * @brief This function returns a reference to member vz_reset_counter_
 * @return Reference to member vz_reset_counter_
 */
uint8_t& vehicle_local_position::vz_reset_counter_()
{
    return m_vz_reset_counter_;
}

/*!
 * @brief This function sets a value in member ax_
 * @param _ax_ New value for member ax_
 */
void vehicle_local_position::ax_(float _ax_)
{
m_ax_ = _ax_;
}

/*!
 * @brief This function returns the value of member ax_
 * @return Value of member ax_
 */
float vehicle_local_position::ax_() const
{
    return m_ax_;
}

/*!
 * @brief This function returns a reference to member ax_
 * @return Reference to member ax_
 */
float& vehicle_local_position::ax_()
{
    return m_ax_;
}

/*!
 * @brief This function sets a value in member ay_
 * @param _ay_ New value for member ay_
 */
void vehicle_local_position::ay_(float _ay_)
{
m_ay_ = _ay_;
}

/*!
 * @brief This function returns the value of member ay_
 * @return Value of member ay_
 */
float vehicle_local_position::ay_() const
{
    return m_ay_;
}

/*!
 * @brief This function returns a reference to member ay_
 * @return Reference to member ay_
 */
float& vehicle_local_position::ay_()
{
    return m_ay_;
}

/*!
 * @brief This function sets a value in member az_
 * @param _az_ New value for member az_
 */
void vehicle_local_position::az_(float _az_)
{
m_az_ = _az_;
}

/*!
 * @brief This function returns the value of member az_
 * @return Value of member az_
 */
float vehicle_local_position::az_() const
{
    return m_az_;
}

/*!
 * @brief This function returns a reference to member az_
 * @return Reference to member az_
 */
float& vehicle_local_position::az_()
{
    return m_az_;
}

/*!
 * @brief This function sets a value in member heading_
 * @param _heading_ New value for member heading_
 */
void vehicle_local_position::heading_(float _heading_)
{
m_heading_ = _heading_;
}

/*!
 * @brief This function returns the value of member heading_
 * @return Value of member heading_
 */
float vehicle_local_position::heading_() const
{
    return m_heading_;
}

/*!
 * @brief This function returns a reference to member heading_
 * @return Reference to member heading_
 */
float& vehicle_local_position::heading_()
{
    return m_heading_;
}

/*!
 * @brief This function sets a value in member delta_heading_
 * @param _delta_heading_ New value for member delta_heading_
 */
void vehicle_local_position::delta_heading_(float _delta_heading_)
{
m_delta_heading_ = _delta_heading_;
}

/*!
 * @brief This function returns the value of member delta_heading_
 * @return Value of member delta_heading_
 */
float vehicle_local_position::delta_heading_() const
{
    return m_delta_heading_;
}

/*!
 * @brief This function returns a reference to member delta_heading_
 * @return Reference to member delta_heading_
 */
float& vehicle_local_position::delta_heading_()
{
    return m_delta_heading_;
}

/*!
 * @brief This function sets a value in member heading_reset_counter_
 * @param _heading_reset_counter_ New value for member heading_reset_counter_
 */
void vehicle_local_position::heading_reset_counter_(uint8_t _heading_reset_counter_)
{
m_heading_reset_counter_ = _heading_reset_counter_;
}

/*!
 * @brief This function returns the value of member heading_reset_counter_
 * @return Value of member heading_reset_counter_
 */
uint8_t vehicle_local_position::heading_reset_counter_() const
{
    return m_heading_reset_counter_;
}

/*!
 * @brief This function returns a reference to member heading_reset_counter_
 * @return Reference to member heading_reset_counter_
 */
uint8_t& vehicle_local_position::heading_reset_counter_()
{
    return m_heading_reset_counter_;
}

/*!
 * @brief This function sets a value in member xy_global_
 * @param _xy_global_ New value for member xy_global_
 */
void vehicle_local_position::xy_global_(bool _xy_global_)
{
m_xy_global_ = _xy_global_;
}

/*!
 * @brief This function returns the value of member xy_global_
 * @return Value of member xy_global_
 */
bool vehicle_local_position::xy_global_() const
{
    return m_xy_global_;
}

/*!
 * @brief This function returns a reference to member xy_global_
 * @return Reference to member xy_global_
 */
bool& vehicle_local_position::xy_global_()
{
    return m_xy_global_;
}

/*!
 * @brief This function sets a value in member z_global_
 * @param _z_global_ New value for member z_global_
 */
void vehicle_local_position::z_global_(bool _z_global_)
{
m_z_global_ = _z_global_;
}

/*!
 * @brief This function returns the value of member z_global_
 * @return Value of member z_global_
 */
bool vehicle_local_position::z_global_() const
{
    return m_z_global_;
}

/*!
 * @brief This function returns a reference to member z_global_
 * @return Reference to member z_global_
 */
bool& vehicle_local_position::z_global_()
{
    return m_z_global_;
}

/*!
 * @brief This function sets a value in member ref_timestamp_
 * @param _ref_timestamp_ New value for member ref_timestamp_
 */
void vehicle_local_position::ref_timestamp_(uint64_t _ref_timestamp_)
{
m_ref_timestamp_ = _ref_timestamp_;
}

/*!
 * @brief This function returns the value of member ref_timestamp_
 * @return Value of member ref_timestamp_
 */
uint64_t vehicle_local_position::ref_timestamp_() const
{
    return m_ref_timestamp_;
}

/*!
 * @brief This function returns a reference to member ref_timestamp_
 * @return Reference to member ref_timestamp_
 */
uint64_t& vehicle_local_position::ref_timestamp_()
{
    return m_ref_timestamp_;
}

/*!
 * @brief This function sets a value in member ref_lat_
 * @param _ref_lat_ New value for member ref_lat_
 */
void vehicle_local_position::ref_lat_(double _ref_lat_)
{
m_ref_lat_ = _ref_lat_;
}

/*!
 * @brief This function returns the value of member ref_lat_
 * @return Value of member ref_lat_
 */
double vehicle_local_position::ref_lat_() const
{
    return m_ref_lat_;
}

/*!
 * @brief This function returns a reference to member ref_lat_
 * @return Reference to member ref_lat_
 */
double& vehicle_local_position::ref_lat_()
{
    return m_ref_lat_;
}

/*!
 * @brief This function sets a value in member ref_lon_
 * @param _ref_lon_ New value for member ref_lon_
 */
void vehicle_local_position::ref_lon_(double _ref_lon_)
{
m_ref_lon_ = _ref_lon_;
}

/*!
 * @brief This function returns the value of member ref_lon_
 * @return Value of member ref_lon_
 */
double vehicle_local_position::ref_lon_() const
{
    return m_ref_lon_;
}

/*!
 * @brief This function returns a reference to member ref_lon_
 * @return Reference to member ref_lon_
 */
double& vehicle_local_position::ref_lon_()
{
    return m_ref_lon_;
}

/*!
 * @brief This function sets a value in member ref_alt_
 * @param _ref_alt_ New value for member ref_alt_
 */
void vehicle_local_position::ref_alt_(float _ref_alt_)
{
m_ref_alt_ = _ref_alt_;
}

/*!
 * @brief This function returns the value of member ref_alt_
 * @return Value of member ref_alt_
 */
float vehicle_local_position::ref_alt_() const
{
    return m_ref_alt_;
}

/*!
 * @brief This function returns a reference to member ref_alt_
 * @return Reference to member ref_alt_
 */
float& vehicle_local_position::ref_alt_()
{
    return m_ref_alt_;
}

/*!
 * @brief This function sets a value in member dist_bottom_
 * @param _dist_bottom_ New value for member dist_bottom_
 */
void vehicle_local_position::dist_bottom_(float _dist_bottom_)
{
m_dist_bottom_ = _dist_bottom_;
}

/*!
 * @brief This function returns the value of member dist_bottom_
 * @return Value of member dist_bottom_
 */
float vehicle_local_position::dist_bottom_() const
{
    return m_dist_bottom_;
}

/*!
 * @brief This function returns a reference to member dist_bottom_
 * @return Reference to member dist_bottom_
 */
float& vehicle_local_position::dist_bottom_()
{
    return m_dist_bottom_;
}

/*!
 * @brief This function sets a value in member dist_bottom_valid_
 * @param _dist_bottom_valid_ New value for member dist_bottom_valid_
 */
void vehicle_local_position::dist_bottom_valid_(bool _dist_bottom_valid_)
{
m_dist_bottom_valid_ = _dist_bottom_valid_;
}

/*!
 * @brief This function returns the value of member dist_bottom_valid_
 * @return Value of member dist_bottom_valid_
 */
bool vehicle_local_position::dist_bottom_valid_() const
{
    return m_dist_bottom_valid_;
}

/*!
 * @brief This function returns a reference to member dist_bottom_valid_
 * @return Reference to member dist_bottom_valid_
 */
bool& vehicle_local_position::dist_bottom_valid_()
{
    return m_dist_bottom_valid_;
}

/*!
 * @brief This function sets a value in member dist_bottom_sensor_bitfield_
 * @param _dist_bottom_sensor_bitfield_ New value for member dist_bottom_sensor_bitfield_
 */
void vehicle_local_position::dist_bottom_sensor_bitfield_(uint8_t _dist_bottom_sensor_bitfield_)
{
m_dist_bottom_sensor_bitfield_ = _dist_bottom_sensor_bitfield_;
}

/*!
 * @brief This function returns the value of member dist_bottom_sensor_bitfield_
 * @return Value of member dist_bottom_sensor_bitfield_
 */
uint8_t vehicle_local_position::dist_bottom_sensor_bitfield_() const
{
    return m_dist_bottom_sensor_bitfield_;
}

/*!
 * @brief This function returns a reference to member dist_bottom_sensor_bitfield_
 * @return Reference to member dist_bottom_sensor_bitfield_
 */
uint8_t& vehicle_local_position::dist_bottom_sensor_bitfield_()
{
    return m_dist_bottom_sensor_bitfield_;
}

/*!
 * @brief This function sets a value in member eph_
 * @param _eph_ New value for member eph_
 */
void vehicle_local_position::eph_(float _eph_)
{
m_eph_ = _eph_;
}

/*!
 * @brief This function returns the value of member eph_
 * @return Value of member eph_
 */
float vehicle_local_position::eph_() const
{
    return m_eph_;
}

/*!
 * @brief This function returns a reference to member eph_
 * @return Reference to member eph_
 */
float& vehicle_local_position::eph_()
{
    return m_eph_;
}

/*!
 * @brief This function sets a value in member epv_
 * @param _epv_ New value for member epv_
 */
void vehicle_local_position::epv_(float _epv_)
{
m_epv_ = _epv_;
}

/*!
 * @brief This function returns the value of member epv_
 * @return Value of member epv_
 */
float vehicle_local_position::epv_() const
{
    return m_epv_;
}

/*!
 * @brief This function returns a reference to member epv_
 * @return Reference to member epv_
 */
float& vehicle_local_position::epv_()
{
    return m_epv_;
}

/*!
 * @brief This function sets a value in member evh_
 * @param _evh_ New value for member evh_
 */
void vehicle_local_position::evh_(float _evh_)
{
m_evh_ = _evh_;
}

/*!
 * @brief This function returns the value of member evh_
 * @return Value of member evh_
 */
float vehicle_local_position::evh_() const
{
    return m_evh_;
}

/*!
 * @brief This function returns a reference to member evh_
 * @return Reference to member evh_
 */
float& vehicle_local_position::evh_()
{
    return m_evh_;
}

/*!
 * @brief This function sets a value in member evv_
 * @param _evv_ New value for member evv_
 */
void vehicle_local_position::evv_(float _evv_)
{
m_evv_ = _evv_;
}

/*!
 * @brief This function returns the value of member evv_
 * @return Value of member evv_
 */
float vehicle_local_position::evv_() const
{
    return m_evv_;
}

/*!
 * @brief This function returns a reference to member evv_
 * @return Reference to member evv_
 */
float& vehicle_local_position::evv_()
{
    return m_evv_;
}

/*!
 * @brief This function sets a value in member vxy_max_
 * @param _vxy_max_ New value for member vxy_max_
 */
void vehicle_local_position::vxy_max_(float _vxy_max_)
{
m_vxy_max_ = _vxy_max_;
}

/*!
 * @brief This function returns the value of member vxy_max_
 * @return Value of member vxy_max_
 */
float vehicle_local_position::vxy_max_() const
{
    return m_vxy_max_;
}

/*!
 * @brief This function returns a reference to member vxy_max_
 * @return Reference to member vxy_max_
 */
float& vehicle_local_position::vxy_max_()
{
    return m_vxy_max_;
}

/*!
 * @brief This function sets a value in member vz_max_
 * @param _vz_max_ New value for member vz_max_
 */
void vehicle_local_position::vz_max_(float _vz_max_)
{
m_vz_max_ = _vz_max_;
}

/*!
 * @brief This function returns the value of member vz_max_
 * @return Value of member vz_max_
 */
float vehicle_local_position::vz_max_() const
{
    return m_vz_max_;
}

/*!
 * @brief This function returns a reference to member vz_max_
 * @return Reference to member vz_max_
 */
float& vehicle_local_position::vz_max_()
{
    return m_vz_max_;
}

/*!
 * @brief This function sets a value in member hagl_min_
 * @param _hagl_min_ New value for member hagl_min_
 */
void vehicle_local_position::hagl_min_(float _hagl_min_)
{
m_hagl_min_ = _hagl_min_;
}

/*!
 * @brief This function returns the value of member hagl_min_
 * @return Value of member hagl_min_
 */
float vehicle_local_position::hagl_min_() const
{
    return m_hagl_min_;
}

/*!
 * @brief This function returns a reference to member hagl_min_
 * @return Reference to member hagl_min_
 */
float& vehicle_local_position::hagl_min_()
{
    return m_hagl_min_;
}

/*!
 * @brief This function sets a value in member hagl_max_
 * @param _hagl_max_ New value for member hagl_max_
 */
void vehicle_local_position::hagl_max_(float _hagl_max_)
{
m_hagl_max_ = _hagl_max_;
}

/*!
 * @brief This function returns the value of member hagl_max_
 * @return Value of member hagl_max_
 */
float vehicle_local_position::hagl_max_() const
{
    return m_hagl_max_;
}

/*!
 * @brief This function returns a reference to member hagl_max_
 * @return Reference to member hagl_max_
 */
float& vehicle_local_position::hagl_max_()
{
    return m_hagl_max_;
}


size_t vehicle_local_position::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;















































    return current_align;
}

bool vehicle_local_position::isKeyDefined()
{
   return false;
}

void vehicle_local_position::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
}
