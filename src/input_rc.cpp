// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file input_rc.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "input_rc.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


















input_rc::input_rc()
{
    // m_timestamp_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5f3a4b84
    m_timestamp_ = 0;
    // m_timestamp_last_signal_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@27f723
    m_timestamp_last_signal_ = 0;
    // m_channel_count_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@670b40af
    m_channel_count_ = 0;
    // m_rssi_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4923ab24
    m_rssi_ = 0;
    // m_rc_failsafe_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@44c8afef
    m_rc_failsafe_ = false;
    // m_rc_lost_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@46daef40
    m_rc_lost_ = false;
    // m_rc_lost_frame_count_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@13c27452
    m_rc_lost_frame_count_ = 0;
    // m_rc_total_frame_count_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@262b2c86
    m_rc_total_frame_count_ = 0;
    // m_rc_ppm_frame_length_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@371a67ec
    m_rc_ppm_frame_length_ = 0;
    // m_input_source_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5ed828d
    m_input_source_ = 0;
    // m_values com.eprosima.idl.parser.typecode.AliasTypeCode@50d0686
    memset(&m_values, 0, (18) * 2);

}

input_rc::~input_rc()
{











}

input_rc::input_rc(const input_rc &x)
{
    m_timestamp_ = x.m_timestamp_;
    m_timestamp_last_signal_ = x.m_timestamp_last_signal_;
    m_channel_count_ = x.m_channel_count_;
    m_rssi_ = x.m_rssi_;
    m_rc_failsafe_ = x.m_rc_failsafe_;
    m_rc_lost_ = x.m_rc_lost_;
    m_rc_lost_frame_count_ = x.m_rc_lost_frame_count_;
    m_rc_total_frame_count_ = x.m_rc_total_frame_count_;
    m_rc_ppm_frame_length_ = x.m_rc_ppm_frame_length_;
    m_input_source_ = x.m_input_source_;
    m_values = x.m_values;
}

input_rc::input_rc(input_rc &&x)
{
    m_timestamp_ = x.m_timestamp_;
    m_timestamp_last_signal_ = x.m_timestamp_last_signal_;
    m_channel_count_ = x.m_channel_count_;
    m_rssi_ = x.m_rssi_;
    m_rc_failsafe_ = x.m_rc_failsafe_;
    m_rc_lost_ = x.m_rc_lost_;
    m_rc_lost_frame_count_ = x.m_rc_lost_frame_count_;
    m_rc_total_frame_count_ = x.m_rc_total_frame_count_;
    m_rc_ppm_frame_length_ = x.m_rc_ppm_frame_length_;
    m_input_source_ = x.m_input_source_;
    m_values = std::move(x.m_values);
}

input_rc& input_rc::operator=(const input_rc &x)
{

    m_timestamp_ = x.m_timestamp_;
    m_timestamp_last_signal_ = x.m_timestamp_last_signal_;
    m_channel_count_ = x.m_channel_count_;
    m_rssi_ = x.m_rssi_;
    m_rc_failsafe_ = x.m_rc_failsafe_;
    m_rc_lost_ = x.m_rc_lost_;
    m_rc_lost_frame_count_ = x.m_rc_lost_frame_count_;
    m_rc_total_frame_count_ = x.m_rc_total_frame_count_;
    m_rc_ppm_frame_length_ = x.m_rc_ppm_frame_length_;
    m_input_source_ = x.m_input_source_;
    m_values = x.m_values;

    return *this;
}

input_rc& input_rc::operator=(input_rc &&x)
{

    m_timestamp_ = x.m_timestamp_;
    m_timestamp_last_signal_ = x.m_timestamp_last_signal_;
    m_channel_count_ = x.m_channel_count_;
    m_rssi_ = x.m_rssi_;
    m_rc_failsafe_ = x.m_rc_failsafe_;
    m_rc_lost_ = x.m_rc_lost_;
    m_rc_lost_frame_count_ = x.m_rc_lost_frame_count_;
    m_rc_total_frame_count_ = x.m_rc_total_frame_count_;
    m_rc_ppm_frame_length_ = x.m_rc_ppm_frame_length_;
    m_input_source_ = x.m_input_source_;
    m_values = std::move(x.m_values);

    return *this;
}

size_t input_rc::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += ((18) * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);



    return current_alignment - initial_alignment;
}

size_t input_rc::getCdrSerializedSize(const input_rc& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    if ((18) > 0)
    {
        current_alignment += ((18) * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }


    return current_alignment - initial_alignment;
}

void input_rc::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_timestamp_;
    scdr << m_timestamp_last_signal_;
    scdr << m_channel_count_;
    scdr << m_rssi_;
    scdr << m_rc_failsafe_;
    scdr << m_rc_lost_;
    scdr << m_rc_lost_frame_count_;
    scdr << m_rc_total_frame_count_;
    scdr << m_rc_ppm_frame_length_;
    scdr << m_input_source_;
    scdr << m_values;

}

void input_rc::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_timestamp_;
    dcdr >> m_timestamp_last_signal_;
    dcdr >> m_channel_count_;
    dcdr >> m_rssi_;
    dcdr >> m_rc_failsafe_;
    dcdr >> m_rc_lost_;
    dcdr >> m_rc_lost_frame_count_;
    dcdr >> m_rc_total_frame_count_;
    dcdr >> m_rc_ppm_frame_length_;
    dcdr >> m_input_source_;
    dcdr >> m_values;

}

/*!
 * @brief This function sets a value in member timestamp_
 * @param _timestamp_ New value for member timestamp_
 */
void input_rc::timestamp_(uint64_t _timestamp_)
{
m_timestamp_ = _timestamp_;
}

/*!
 * @brief This function returns the value of member timestamp_
 * @return Value of member timestamp_
 */
uint64_t input_rc::timestamp_() const
{
    return m_timestamp_;
}

/*!
 * @brief This function returns a reference to member timestamp_
 * @return Reference to member timestamp_
 */
uint64_t& input_rc::timestamp_()
{
    return m_timestamp_;
}

/*!
 * @brief This function sets a value in member timestamp_last_signal_
 * @param _timestamp_last_signal_ New value for member timestamp_last_signal_
 */
void input_rc::timestamp_last_signal_(uint64_t _timestamp_last_signal_)
{
m_timestamp_last_signal_ = _timestamp_last_signal_;
}

/*!
 * @brief This function returns the value of member timestamp_last_signal_
 * @return Value of member timestamp_last_signal_
 */
uint64_t input_rc::timestamp_last_signal_() const
{
    return m_timestamp_last_signal_;
}

/*!
 * @brief This function returns a reference to member timestamp_last_signal_
 * @return Reference to member timestamp_last_signal_
 */
uint64_t& input_rc::timestamp_last_signal_()
{
    return m_timestamp_last_signal_;
}

/*!
 * @brief This function sets a value in member channel_count_
 * @param _channel_count_ New value for member channel_count_
 */
void input_rc::channel_count_(uint8_t _channel_count_)
{
m_channel_count_ = _channel_count_;
}

/*!
 * @brief This function returns the value of member channel_count_
 * @return Value of member channel_count_
 */
uint8_t input_rc::channel_count_() const
{
    return m_channel_count_;
}

/*!
 * @brief This function returns a reference to member channel_count_
 * @return Reference to member channel_count_
 */
uint8_t& input_rc::channel_count_()
{
    return m_channel_count_;
}

/*!
 * @brief This function sets a value in member rssi_
 * @param _rssi_ New value for member rssi_
 */
void input_rc::rssi_(int32_t _rssi_)
{
m_rssi_ = _rssi_;
}

/*!
 * @brief This function returns the value of member rssi_
 * @return Value of member rssi_
 */
int32_t input_rc::rssi_() const
{
    return m_rssi_;
}

/*!
 * @brief This function returns a reference to member rssi_
 * @return Reference to member rssi_
 */
int32_t& input_rc::rssi_()
{
    return m_rssi_;
}

/*!
 * @brief This function sets a value in member rc_failsafe_
 * @param _rc_failsafe_ New value for member rc_failsafe_
 */
void input_rc::rc_failsafe_(bool _rc_failsafe_)
{
m_rc_failsafe_ = _rc_failsafe_;
}

/*!
 * @brief This function returns the value of member rc_failsafe_
 * @return Value of member rc_failsafe_
 */
bool input_rc::rc_failsafe_() const
{
    return m_rc_failsafe_;
}

/*!
 * @brief This function returns a reference to member rc_failsafe_
 * @return Reference to member rc_failsafe_
 */
bool& input_rc::rc_failsafe_()
{
    return m_rc_failsafe_;
}

/*!
 * @brief This function sets a value in member rc_lost_
 * @param _rc_lost_ New value for member rc_lost_
 */
void input_rc::rc_lost_(bool _rc_lost_)
{
m_rc_lost_ = _rc_lost_;
}

/*!
 * @brief This function returns the value of member rc_lost_
 * @return Value of member rc_lost_
 */
bool input_rc::rc_lost_() const
{
    return m_rc_lost_;
}

/*!
 * @brief This function returns a reference to member rc_lost_
 * @return Reference to member rc_lost_
 */
bool& input_rc::rc_lost_()
{
    return m_rc_lost_;
}

/*!
 * @brief This function sets a value in member rc_lost_frame_count_
 * @param _rc_lost_frame_count_ New value for member rc_lost_frame_count_
 */
void input_rc::rc_lost_frame_count_(uint16_t _rc_lost_frame_count_)
{
m_rc_lost_frame_count_ = _rc_lost_frame_count_;
}

/*!
 * @brief This function returns the value of member rc_lost_frame_count_
 * @return Value of member rc_lost_frame_count_
 */
uint16_t input_rc::rc_lost_frame_count_() const
{
    return m_rc_lost_frame_count_;
}

/*!
 * @brief This function returns a reference to member rc_lost_frame_count_
 * @return Reference to member rc_lost_frame_count_
 */
uint16_t& input_rc::rc_lost_frame_count_()
{
    return m_rc_lost_frame_count_;
}

/*!
 * @brief This function sets a value in member rc_total_frame_count_
 * @param _rc_total_frame_count_ New value for member rc_total_frame_count_
 */
void input_rc::rc_total_frame_count_(uint16_t _rc_total_frame_count_)
{
m_rc_total_frame_count_ = _rc_total_frame_count_;
}

/*!
 * @brief This function returns the value of member rc_total_frame_count_
 * @return Value of member rc_total_frame_count_
 */
uint16_t input_rc::rc_total_frame_count_() const
{
    return m_rc_total_frame_count_;
}

/*!
 * @brief This function returns a reference to member rc_total_frame_count_
 * @return Reference to member rc_total_frame_count_
 */
uint16_t& input_rc::rc_total_frame_count_()
{
    return m_rc_total_frame_count_;
}

/*!
 * @brief This function sets a value in member rc_ppm_frame_length_
 * @param _rc_ppm_frame_length_ New value for member rc_ppm_frame_length_
 */
void input_rc::rc_ppm_frame_length_(uint16_t _rc_ppm_frame_length_)
{
m_rc_ppm_frame_length_ = _rc_ppm_frame_length_;
}

/*!
 * @brief This function returns the value of member rc_ppm_frame_length_
 * @return Value of member rc_ppm_frame_length_
 */
uint16_t input_rc::rc_ppm_frame_length_() const
{
    return m_rc_ppm_frame_length_;
}

/*!
 * @brief This function returns a reference to member rc_ppm_frame_length_
 * @return Reference to member rc_ppm_frame_length_
 */
uint16_t& input_rc::rc_ppm_frame_length_()
{
    return m_rc_ppm_frame_length_;
}

/*!
 * @brief This function sets a value in member input_source_
 * @param _input_source_ New value for member input_source_
 */
void input_rc::input_source_(uint8_t _input_source_)
{
m_input_source_ = _input_source_;
}

/*!
 * @brief This function returns the value of member input_source_
 * @return Value of member input_source_
 */
uint8_t input_rc::input_source_() const
{
    return m_input_source_;
}

/*!
 * @brief This function returns a reference to member input_source_
 * @return Reference to member input_source_
 */
uint8_t& input_rc::input_source_()
{
    return m_input_source_;
}

/*!
 * @brief This function copies the value in member values
 * @param _values New value to be copied in member values
 */
void input_rc::values(const input_rc__unsigned_short_array_18 &_values)
{
m_values = _values;
}

/*!
 * @brief This function moves the value in member values
 * @param _values New value to be moved in member values
 */
void input_rc::values(input_rc__unsigned_short_array_18 &&_values)
{
m_values = std::move(_values);
}

/*!
 * @brief This function returns a constant reference to member values
 * @return Constant reference to member values
 */
const input_rc__unsigned_short_array_18& input_rc::values() const
{
    return m_values;
}

/*!
 * @brief This function returns a reference to member values
 * @return Reference to member values
 */
input_rc__unsigned_short_array_18& input_rc::values()
{
    return m_values;
}

size_t input_rc::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;














    return current_align;
}

bool input_rc::isKeyDefined()
{
   return false;
}

void input_rc::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
     
     
     
     
     
     
     
     
     
}
