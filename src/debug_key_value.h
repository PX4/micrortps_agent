// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file debug_key_value.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _DEBUG_KEY_VALUE_H_
#define _DEBUG_KEY_VALUE_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(debug_key_value_SOURCE)
#define debug_key_value_DllAPI __declspec( dllexport )
#else
#define debug_key_value_DllAPI __declspec( dllimport )
#endif // debug_key_value_SOURCE
#else
#define debug_key_value_DllAPI
#endif
#else
#define debug_key_value_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}


typedef std::array<char, 10> debug_key_value__char_array_10;
/*!
 * @brief This class represents the structure debug_key_value defined by the user in the IDL file.
 * @ingroup DEBUG_KEY_VALUE
 */
class debug_key_value
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport debug_key_value();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~debug_key_value();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object debug_key_value that will be copied.
     */
    eProsima_user_DllExport debug_key_value(const debug_key_value &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object debug_key_value that will be copied.
     */
    eProsima_user_DllExport debug_key_value(debug_key_value &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object debug_key_value that will be copied.
     */
    eProsima_user_DllExport debug_key_value& operator=(const debug_key_value &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object debug_key_value that will be copied.
     */
    eProsima_user_DllExport debug_key_value& operator=(debug_key_value &&x);

    /*!
     * @brief This function sets a value in member timestamp_
     * @param _timestamp_ New value for member timestamp_
     */
    eProsima_user_DllExport void timestamp_(uint64_t _timestamp_);

    /*!
     * @brief This function returns the value of member timestamp_
     * @return Value of member timestamp_
     */
    eProsima_user_DllExport uint64_t timestamp_() const;

    /*!
     * @brief This function returns a reference to member timestamp_
     * @return Reference to member timestamp_
     */
    eProsima_user_DllExport uint64_t& timestamp_();

    /*!
     * @brief This function copies the value in member key
     * @param _key New value to be copied in member key
     */
    eProsima_user_DllExport void key(const debug_key_value__char_array_10 &_key);

    /*!
     * @brief This function moves the value in member key
     * @param _key New value to be moved in member key
     */
    eProsima_user_DllExport void key(debug_key_value__char_array_10 &&_key);

    /*!
     * @brief This function returns a constant reference to member key
     * @return Constant reference to member key
     */
    eProsima_user_DllExport const debug_key_value__char_array_10& key() const;

    /*!
     * @brief This function returns a reference to member key
     * @return Reference to member key
     */
    eProsima_user_DllExport debug_key_value__char_array_10& key();
    /*!
     * @brief This function sets a value in member value_
     * @param _value_ New value for member value_
     */
    eProsima_user_DllExport void value_(float _value_);

    /*!
     * @brief This function returns the value of member value_
     * @return Value of member value_
     */
    eProsima_user_DllExport float value_() const;

    /*!
     * @brief This function returns a reference to member value_
     * @return Reference to member value_
     */
    eProsima_user_DllExport float& value_();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const debug_key_value& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    uint64_t m_timestamp_;
    debug_key_value__char_array_10 m_key;
    float m_value_;
};

#endif // _DEBUG_KEY_VALUE_H_