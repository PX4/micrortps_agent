// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file vehicle_attitude_setpoint.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "vehicle_attitude_setpoint.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>









vehicle_attitude_setpoint::vehicle_attitude_setpoint()
{
    // m_timestamp_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@64485a47
    m_timestamp_ = 0;
    // m_roll_body_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@25bbf683
    m_roll_body_ = 0.0;
    // m_pitch_body_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6ec8211c
    m_pitch_body_ = 0.0;
    // m_yaw_body_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7276c8cd
    m_yaw_body_ = 0.0;
    // m_yaw_sp_move_rate_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2e3fc542
    m_yaw_sp_move_rate_ = 0.0;
    // m_q_d com.eprosima.idl.parser.typecode.AliasTypeCode@150c158
    memset(&m_q_d, 0, (4) * 4);
    // m_thrust_body com.eprosima.idl.parser.typecode.AliasTypeCode@4524411f
    memset(&m_thrust_body, 0, (3) * 4);
    // m_reset_rate_integrals_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1786f9d5
    m_reset_rate_integrals_ = false;
    // m_fw_control_yaw_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@704d6e83
    m_fw_control_yaw_ = false;
    // m_apply_flaps_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@43a0cee9
    m_apply_flaps_ = 0;
    // m_apply_spoilers_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2eda0940
    m_apply_spoilers_ = 0;

}

vehicle_attitude_setpoint::~vehicle_attitude_setpoint()
{











}

vehicle_attitude_setpoint::vehicle_attitude_setpoint(const vehicle_attitude_setpoint &x)
{
    m_timestamp_ = x.m_timestamp_;
    m_roll_body_ = x.m_roll_body_;
    m_pitch_body_ = x.m_pitch_body_;
    m_yaw_body_ = x.m_yaw_body_;
    m_yaw_sp_move_rate_ = x.m_yaw_sp_move_rate_;
    m_q_d = x.m_q_d;
    m_thrust_body = x.m_thrust_body;
    m_reset_rate_integrals_ = x.m_reset_rate_integrals_;
    m_fw_control_yaw_ = x.m_fw_control_yaw_;
    m_apply_flaps_ = x.m_apply_flaps_;
    m_apply_spoilers_ = x.m_apply_spoilers_;
}

vehicle_attitude_setpoint::vehicle_attitude_setpoint(vehicle_attitude_setpoint &&x)
{
    m_timestamp_ = x.m_timestamp_;
    m_roll_body_ = x.m_roll_body_;
    m_pitch_body_ = x.m_pitch_body_;
    m_yaw_body_ = x.m_yaw_body_;
    m_yaw_sp_move_rate_ = x.m_yaw_sp_move_rate_;
    m_q_d = std::move(x.m_q_d);
    m_thrust_body = std::move(x.m_thrust_body);
    m_reset_rate_integrals_ = x.m_reset_rate_integrals_;
    m_fw_control_yaw_ = x.m_fw_control_yaw_;
    m_apply_flaps_ = x.m_apply_flaps_;
    m_apply_spoilers_ = x.m_apply_spoilers_;
}

vehicle_attitude_setpoint& vehicle_attitude_setpoint::operator=(const vehicle_attitude_setpoint &x)
{

    m_timestamp_ = x.m_timestamp_;
    m_roll_body_ = x.m_roll_body_;
    m_pitch_body_ = x.m_pitch_body_;
    m_yaw_body_ = x.m_yaw_body_;
    m_yaw_sp_move_rate_ = x.m_yaw_sp_move_rate_;
    m_q_d = x.m_q_d;
    m_thrust_body = x.m_thrust_body;
    m_reset_rate_integrals_ = x.m_reset_rate_integrals_;
    m_fw_control_yaw_ = x.m_fw_control_yaw_;
    m_apply_flaps_ = x.m_apply_flaps_;
    m_apply_spoilers_ = x.m_apply_spoilers_;

    return *this;
}

vehicle_attitude_setpoint& vehicle_attitude_setpoint::operator=(vehicle_attitude_setpoint &&x)
{

    m_timestamp_ = x.m_timestamp_;
    m_roll_body_ = x.m_roll_body_;
    m_pitch_body_ = x.m_pitch_body_;
    m_yaw_body_ = x.m_yaw_body_;
    m_yaw_sp_move_rate_ = x.m_yaw_sp_move_rate_;
    m_q_d = std::move(x.m_q_d);
    m_thrust_body = std::move(x.m_thrust_body);
    m_reset_rate_integrals_ = x.m_reset_rate_integrals_;
    m_fw_control_yaw_ = x.m_fw_control_yaw_;
    m_apply_flaps_ = x.m_apply_flaps_;
    m_apply_spoilers_ = x.m_apply_spoilers_;

    return *this;
}

size_t vehicle_attitude_setpoint::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((4) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((3) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t vehicle_attitude_setpoint::getCdrSerializedSize(const vehicle_attitude_setpoint& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    if ((4) > 0)
    {
        current_alignment += ((4) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    if ((3) > 0)
    {
        current_alignment += ((3) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void vehicle_attitude_setpoint::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_timestamp_;
    scdr << m_roll_body_;
    scdr << m_pitch_body_;
    scdr << m_yaw_body_;
    scdr << m_yaw_sp_move_rate_;
    scdr << m_q_d;

    scdr << m_thrust_body;

    scdr << m_reset_rate_integrals_;
    scdr << m_fw_control_yaw_;
    scdr << m_apply_flaps_;
    scdr << m_apply_spoilers_;
}

void vehicle_attitude_setpoint::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_timestamp_;
    dcdr >> m_roll_body_;
    dcdr >> m_pitch_body_;
    dcdr >> m_yaw_body_;
    dcdr >> m_yaw_sp_move_rate_;
    dcdr >> m_q_d;

    dcdr >> m_thrust_body;

    dcdr >> m_reset_rate_integrals_;
    dcdr >> m_fw_control_yaw_;
    dcdr >> m_apply_flaps_;
    dcdr >> m_apply_spoilers_;
}

/*!
 * @brief This function sets a value in member timestamp_
 * @param _timestamp_ New value for member timestamp_
 */
void vehicle_attitude_setpoint::timestamp_(uint64_t _timestamp_)
{
m_timestamp_ = _timestamp_;
}

/*!
 * @brief This function returns the value of member timestamp_
 * @return Value of member timestamp_
 */
uint64_t vehicle_attitude_setpoint::timestamp_() const
{
    return m_timestamp_;
}

/*!
 * @brief This function returns a reference to member timestamp_
 * @return Reference to member timestamp_
 */
uint64_t& vehicle_attitude_setpoint::timestamp_()
{
    return m_timestamp_;
}

/*!
 * @brief This function sets a value in member roll_body_
 * @param _roll_body_ New value for member roll_body_
 */
void vehicle_attitude_setpoint::roll_body_(float _roll_body_)
{
m_roll_body_ = _roll_body_;
}

/*!
 * @brief This function returns the value of member roll_body_
 * @return Value of member roll_body_
 */
float vehicle_attitude_setpoint::roll_body_() const
{
    return m_roll_body_;
}

/*!
 * @brief This function returns a reference to member roll_body_
 * @return Reference to member roll_body_
 */
float& vehicle_attitude_setpoint::roll_body_()
{
    return m_roll_body_;
}

/*!
 * @brief This function sets a value in member pitch_body_
 * @param _pitch_body_ New value for member pitch_body_
 */
void vehicle_attitude_setpoint::pitch_body_(float _pitch_body_)
{
m_pitch_body_ = _pitch_body_;
}

/*!
 * @brief This function returns the value of member pitch_body_
 * @return Value of member pitch_body_
 */
float vehicle_attitude_setpoint::pitch_body_() const
{
    return m_pitch_body_;
}

/*!
 * @brief This function returns a reference to member pitch_body_
 * @return Reference to member pitch_body_
 */
float& vehicle_attitude_setpoint::pitch_body_()
{
    return m_pitch_body_;
}

/*!
 * @brief This function sets a value in member yaw_body_
 * @param _yaw_body_ New value for member yaw_body_
 */
void vehicle_attitude_setpoint::yaw_body_(float _yaw_body_)
{
m_yaw_body_ = _yaw_body_;
}

/*!
 * @brief This function returns the value of member yaw_body_
 * @return Value of member yaw_body_
 */
float vehicle_attitude_setpoint::yaw_body_() const
{
    return m_yaw_body_;
}

/*!
 * @brief This function returns a reference to member yaw_body_
 * @return Reference to member yaw_body_
 */
float& vehicle_attitude_setpoint::yaw_body_()
{
    return m_yaw_body_;
}

/*!
 * @brief This function sets a value in member yaw_sp_move_rate_
 * @param _yaw_sp_move_rate_ New value for member yaw_sp_move_rate_
 */
void vehicle_attitude_setpoint::yaw_sp_move_rate_(float _yaw_sp_move_rate_)
{
m_yaw_sp_move_rate_ = _yaw_sp_move_rate_;
}

/*!
 * @brief This function returns the value of member yaw_sp_move_rate_
 * @return Value of member yaw_sp_move_rate_
 */
float vehicle_attitude_setpoint::yaw_sp_move_rate_() const
{
    return m_yaw_sp_move_rate_;
}

/*!
 * @brief This function returns a reference to member yaw_sp_move_rate_
 * @return Reference to member yaw_sp_move_rate_
 */
float& vehicle_attitude_setpoint::yaw_sp_move_rate_()
{
    return m_yaw_sp_move_rate_;
}

/*!
 * @brief This function copies the value in member q_d
 * @param _q_d New value to be copied in member q_d
 */
void vehicle_attitude_setpoint::q_d(const vehicle_attitude_setpoint__float_array_4 &_q_d)
{
m_q_d = _q_d;
}

/*!
 * @brief This function moves the value in member q_d
 * @param _q_d New value to be moved in member q_d
 */
void vehicle_attitude_setpoint::q_d(vehicle_attitude_setpoint__float_array_4 &&_q_d)
{
m_q_d = std::move(_q_d);
}

/*!
 * @brief This function returns a constant reference to member q_d
 * @return Constant reference to member q_d
 */
const vehicle_attitude_setpoint__float_array_4& vehicle_attitude_setpoint::q_d() const
{
    return m_q_d;
}

/*!
 * @brief This function returns a reference to member q_d
 * @return Reference to member q_d
 */
vehicle_attitude_setpoint__float_array_4& vehicle_attitude_setpoint::q_d()
{
    return m_q_d;
}
/*!
 * @brief This function copies the value in member thrust_body
 * @param _thrust_body New value to be copied in member thrust_body
 */
void vehicle_attitude_setpoint::thrust_body(const vehicle_attitude_setpoint__float_array_3 &_thrust_body)
{
m_thrust_body = _thrust_body;
}

/*!
 * @brief This function moves the value in member thrust_body
 * @param _thrust_body New value to be moved in member thrust_body
 */
void vehicle_attitude_setpoint::thrust_body(vehicle_attitude_setpoint__float_array_3 &&_thrust_body)
{
m_thrust_body = std::move(_thrust_body);
}

/*!
 * @brief This function returns a constant reference to member thrust_body
 * @return Constant reference to member thrust_body
 */
const vehicle_attitude_setpoint__float_array_3& vehicle_attitude_setpoint::thrust_body() const
{
    return m_thrust_body;
}

/*!
 * @brief This function returns a reference to member thrust_body
 * @return Reference to member thrust_body
 */
vehicle_attitude_setpoint__float_array_3& vehicle_attitude_setpoint::thrust_body()
{
    return m_thrust_body;
}
/*!
 * @brief This function sets a value in member reset_rate_integrals_
 * @param _reset_rate_integrals_ New value for member reset_rate_integrals_
 */
void vehicle_attitude_setpoint::reset_rate_integrals_(bool _reset_rate_integrals_)
{
m_reset_rate_integrals_ = _reset_rate_integrals_;
}

/*!
 * @brief This function returns the value of member reset_rate_integrals_
 * @return Value of member reset_rate_integrals_
 */
bool vehicle_attitude_setpoint::reset_rate_integrals_() const
{
    return m_reset_rate_integrals_;
}

/*!
 * @brief This function returns a reference to member reset_rate_integrals_
 * @return Reference to member reset_rate_integrals_
 */
bool& vehicle_attitude_setpoint::reset_rate_integrals_()
{
    return m_reset_rate_integrals_;
}

/*!
 * @brief This function sets a value in member fw_control_yaw_
 * @param _fw_control_yaw_ New value for member fw_control_yaw_
 */
void vehicle_attitude_setpoint::fw_control_yaw_(bool _fw_control_yaw_)
{
m_fw_control_yaw_ = _fw_control_yaw_;
}

/*!
 * @brief This function returns the value of member fw_control_yaw_
 * @return Value of member fw_control_yaw_
 */
bool vehicle_attitude_setpoint::fw_control_yaw_() const
{
    return m_fw_control_yaw_;
}

/*!
 * @brief This function returns a reference to member fw_control_yaw_
 * @return Reference to member fw_control_yaw_
 */
bool& vehicle_attitude_setpoint::fw_control_yaw_()
{
    return m_fw_control_yaw_;
}

/*!
 * @brief This function sets a value in member apply_flaps_
 * @param _apply_flaps_ New value for member apply_flaps_
 */
void vehicle_attitude_setpoint::apply_flaps_(uint8_t _apply_flaps_)
{
m_apply_flaps_ = _apply_flaps_;
}

/*!
 * @brief This function returns the value of member apply_flaps_
 * @return Value of member apply_flaps_
 */
uint8_t vehicle_attitude_setpoint::apply_flaps_() const
{
    return m_apply_flaps_;
}

/*!
 * @brief This function returns a reference to member apply_flaps_
 * @return Reference to member apply_flaps_
 */
uint8_t& vehicle_attitude_setpoint::apply_flaps_()
{
    return m_apply_flaps_;
}

/*!
 * @brief This function sets a value in member apply_spoilers_
 * @param _apply_spoilers_ New value for member apply_spoilers_
 */
void vehicle_attitude_setpoint::apply_spoilers_(uint8_t _apply_spoilers_)
{
m_apply_spoilers_ = _apply_spoilers_;
}

/*!
 * @brief This function returns the value of member apply_spoilers_
 * @return Value of member apply_spoilers_
 */
uint8_t vehicle_attitude_setpoint::apply_spoilers_() const
{
    return m_apply_spoilers_;
}

/*!
 * @brief This function returns a reference to member apply_spoilers_
 * @return Reference to member apply_spoilers_
 */
uint8_t& vehicle_attitude_setpoint::apply_spoilers_()
{
    return m_apply_spoilers_;
}


size_t vehicle_attitude_setpoint::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;














    return current_align;
}

bool vehicle_attitude_setpoint::isKeyDefined()
{
   return false;
}

void vehicle_attitude_setpoint::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
     
     
     
     
     
     
     
     
     
}
