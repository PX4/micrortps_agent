// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file obstacle_distance.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _OBSTACLE_DISTANCE_H_
#define _OBSTACLE_DISTANCE_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(obstacle_distance_SOURCE)
#define obstacle_distance_DllAPI __declspec( dllexport )
#else
#define obstacle_distance_DllAPI __declspec( dllimport )
#endif // obstacle_distance_SOURCE
#else
#define obstacle_distance_DllAPI
#endif
#else
#define obstacle_distance_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}


const uint8_t obstacle_distance__MAV_FRAME_GLOBAL = 0;
const uint8_t obstacle_distance__MAV_FRAME_LOCAL_NED = 1;
const uint8_t obstacle_distance__MAV_FRAME_BODY_FRD = 12;
const uint8_t obstacle_distance__MAV_DISTANCE_SENSOR_LASER = 0;
const uint8_t obstacle_distance__MAV_DISTANCE_SENSOR_ULTRASOUND = 1;
const uint8_t obstacle_distance__MAV_DISTANCE_SENSOR_INFRARED = 2;
const uint8_t obstacle_distance__MAV_DISTANCE_SENSOR_RADAR = 3;
typedef std::array<uint16_t, 72> obstacle_distance__unsigned_short_array_72;
/*!
 * @brief This class represents the structure obstacle_distance defined by the user in the IDL file.
 * @ingroup OBSTACLE_DISTANCE
 */
class obstacle_distance
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport obstacle_distance();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~obstacle_distance();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object obstacle_distance that will be copied.
     */
    eProsima_user_DllExport obstacle_distance(const obstacle_distance &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object obstacle_distance that will be copied.
     */
    eProsima_user_DllExport obstacle_distance(obstacle_distance &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object obstacle_distance that will be copied.
     */
    eProsima_user_DllExport obstacle_distance& operator=(const obstacle_distance &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object obstacle_distance that will be copied.
     */
    eProsima_user_DllExport obstacle_distance& operator=(obstacle_distance &&x);

    /*!
     * @brief This function sets a value in member timestamp_
     * @param _timestamp_ New value for member timestamp_
     */
    eProsima_user_DllExport void timestamp_(uint64_t _timestamp_);

    /*!
     * @brief This function returns the value of member timestamp_
     * @return Value of member timestamp_
     */
    eProsima_user_DllExport uint64_t timestamp_() const;

    /*!
     * @brief This function returns a reference to member timestamp_
     * @return Reference to member timestamp_
     */
    eProsima_user_DllExport uint64_t& timestamp_();

    /*!
     * @brief This function sets a value in member frame_
     * @param _frame_ New value for member frame_
     */
    eProsima_user_DllExport void frame_(uint8_t _frame_);

    /*!
     * @brief This function returns the value of member frame_
     * @return Value of member frame_
     */
    eProsima_user_DllExport uint8_t frame_() const;

    /*!
     * @brief This function returns a reference to member frame_
     * @return Reference to member frame_
     */
    eProsima_user_DllExport uint8_t& frame_();

    /*!
     * @brief This function sets a value in member sensor_type_
     * @param _sensor_type_ New value for member sensor_type_
     */
    eProsima_user_DllExport void sensor_type_(uint8_t _sensor_type_);

    /*!
     * @brief This function returns the value of member sensor_type_
     * @return Value of member sensor_type_
     */
    eProsima_user_DllExport uint8_t sensor_type_() const;

    /*!
     * @brief This function returns a reference to member sensor_type_
     * @return Reference to member sensor_type_
     */
    eProsima_user_DllExport uint8_t& sensor_type_();

    /*!
     * @brief This function copies the value in member distances
     * @param _distances New value to be copied in member distances
     */
    eProsima_user_DllExport void distances(const obstacle_distance__unsigned_short_array_72 &_distances);

    /*!
     * @brief This function moves the value in member distances
     * @param _distances New value to be moved in member distances
     */
    eProsima_user_DllExport void distances(obstacle_distance__unsigned_short_array_72 &&_distances);

    /*!
     * @brief This function returns a constant reference to member distances
     * @return Constant reference to member distances
     */
    eProsima_user_DllExport const obstacle_distance__unsigned_short_array_72& distances() const;

    /*!
     * @brief This function returns a reference to member distances
     * @return Reference to member distances
     */
    eProsima_user_DllExport obstacle_distance__unsigned_short_array_72& distances();
    /*!
     * @brief This function sets a value in member increment_
     * @param _increment_ New value for member increment_
     */
    eProsima_user_DllExport void increment_(float _increment_);

    /*!
     * @brief This function returns the value of member increment_
     * @return Value of member increment_
     */
    eProsima_user_DllExport float increment_() const;

    /*!
     * @brief This function returns a reference to member increment_
     * @return Reference to member increment_
     */
    eProsima_user_DllExport float& increment_();

    /*!
     * @brief This function sets a value in member min_distance_
     * @param _min_distance_ New value for member min_distance_
     */
    eProsima_user_DllExport void min_distance_(uint16_t _min_distance_);

    /*!
     * @brief This function returns the value of member min_distance_
     * @return Value of member min_distance_
     */
    eProsima_user_DllExport uint16_t min_distance_() const;

    /*!
     * @brief This function returns a reference to member min_distance_
     * @return Reference to member min_distance_
     */
    eProsima_user_DllExport uint16_t& min_distance_();

    /*!
     * @brief This function sets a value in member max_distance_
     * @param _max_distance_ New value for member max_distance_
     */
    eProsima_user_DllExport void max_distance_(uint16_t _max_distance_);

    /*!
     * @brief This function returns the value of member max_distance_
     * @return Value of member max_distance_
     */
    eProsima_user_DllExport uint16_t max_distance_() const;

    /*!
     * @brief This function returns a reference to member max_distance_
     * @return Reference to member max_distance_
     */
    eProsima_user_DllExport uint16_t& max_distance_();

    /*!
     * @brief This function sets a value in member angle_offset_
     * @param _angle_offset_ New value for member angle_offset_
     */
    eProsima_user_DllExport void angle_offset_(float _angle_offset_);

    /*!
     * @brief This function returns the value of member angle_offset_
     * @return Value of member angle_offset_
     */
    eProsima_user_DllExport float angle_offset_() const;

    /*!
     * @brief This function returns a reference to member angle_offset_
     * @return Reference to member angle_offset_
     */
    eProsima_user_DllExport float& angle_offset_();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const obstacle_distance& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    uint64_t m_timestamp_;
    uint8_t m_frame_;
    uint8_t m_sensor_type_;
    obstacle_distance__unsigned_short_array_72 m_distances;
    float m_increment_;
    uint16_t m_min_distance_;
    uint16_t m_max_distance_;
    float m_angle_offset_;
};

#endif // _OBSTACLE_DISTANCE_H_