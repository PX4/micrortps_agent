// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file sensor_optical_flow.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "sensor_optical_flow.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>







sensor_optical_flow::sensor_optical_flow()
{
    // m_timestamp_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@57f23557
    m_timestamp_ = 0;
    // m_timestamp_sample_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3d0f8e03
    m_timestamp_sample_ = 0;
    // m_device_id_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6366ebe0
    m_device_id_ = 0;
    // m_pixel_flow com.eprosima.idl.parser.typecode.AliasTypeCode@44f75083
    memset(&m_pixel_flow, 0, (2) * 4);
    // m_delta_angle com.eprosima.idl.parser.typecode.AliasTypeCode@17baae6e
    memset(&m_delta_angle, 0, (3) * 4);
    // m_delta_angle_available_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@69379752
    m_delta_angle_available_ = false;
    // m_distance_m_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@27fe3806
    m_distance_m_ = 0.0;
    // m_distance_available_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5f71c76a
    m_distance_available_ = false;
    // m_integration_timespan_us_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1d7acb34
    m_integration_timespan_us_ = 0;
    // m_quality_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@48a242ce
    m_quality_ = 0;
    // m_error_count_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1e4a7dd4
    m_error_count_ = 0;
    // m_max_flow_rate_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4f51b3e0
    m_max_flow_rate_ = 0.0;
    // m_min_ground_distance_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4b9e255
    m_min_ground_distance_ = 0.0;
    // m_max_ground_distance_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5e57643e
    m_max_ground_distance_ = 0.0;
    // m_mode_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@133e16fd
    m_mode_ = 0;

}

sensor_optical_flow::~sensor_optical_flow()
{















}

sensor_optical_flow::sensor_optical_flow(const sensor_optical_flow &x)
{
    m_timestamp_ = x.m_timestamp_;
    m_timestamp_sample_ = x.m_timestamp_sample_;
    m_device_id_ = x.m_device_id_;
    m_pixel_flow = x.m_pixel_flow;
    m_delta_angle = x.m_delta_angle;
    m_delta_angle_available_ = x.m_delta_angle_available_;
    m_distance_m_ = x.m_distance_m_;
    m_distance_available_ = x.m_distance_available_;
    m_integration_timespan_us_ = x.m_integration_timespan_us_;
    m_quality_ = x.m_quality_;
    m_error_count_ = x.m_error_count_;
    m_max_flow_rate_ = x.m_max_flow_rate_;
    m_min_ground_distance_ = x.m_min_ground_distance_;
    m_max_ground_distance_ = x.m_max_ground_distance_;
    m_mode_ = x.m_mode_;
}

sensor_optical_flow::sensor_optical_flow(sensor_optical_flow &&x)
{
    m_timestamp_ = x.m_timestamp_;
    m_timestamp_sample_ = x.m_timestamp_sample_;
    m_device_id_ = x.m_device_id_;
    m_pixel_flow = std::move(x.m_pixel_flow);
    m_delta_angle = std::move(x.m_delta_angle);
    m_delta_angle_available_ = x.m_delta_angle_available_;
    m_distance_m_ = x.m_distance_m_;
    m_distance_available_ = x.m_distance_available_;
    m_integration_timespan_us_ = x.m_integration_timespan_us_;
    m_quality_ = x.m_quality_;
    m_error_count_ = x.m_error_count_;
    m_max_flow_rate_ = x.m_max_flow_rate_;
    m_min_ground_distance_ = x.m_min_ground_distance_;
    m_max_ground_distance_ = x.m_max_ground_distance_;
    m_mode_ = x.m_mode_;
}

sensor_optical_flow& sensor_optical_flow::operator=(const sensor_optical_flow &x)
{

    m_timestamp_ = x.m_timestamp_;
    m_timestamp_sample_ = x.m_timestamp_sample_;
    m_device_id_ = x.m_device_id_;
    m_pixel_flow = x.m_pixel_flow;
    m_delta_angle = x.m_delta_angle;
    m_delta_angle_available_ = x.m_delta_angle_available_;
    m_distance_m_ = x.m_distance_m_;
    m_distance_available_ = x.m_distance_available_;
    m_integration_timespan_us_ = x.m_integration_timespan_us_;
    m_quality_ = x.m_quality_;
    m_error_count_ = x.m_error_count_;
    m_max_flow_rate_ = x.m_max_flow_rate_;
    m_min_ground_distance_ = x.m_min_ground_distance_;
    m_max_ground_distance_ = x.m_max_ground_distance_;
    m_mode_ = x.m_mode_;

    return *this;
}

sensor_optical_flow& sensor_optical_flow::operator=(sensor_optical_flow &&x)
{

    m_timestamp_ = x.m_timestamp_;
    m_timestamp_sample_ = x.m_timestamp_sample_;
    m_device_id_ = x.m_device_id_;
    m_pixel_flow = std::move(x.m_pixel_flow);
    m_delta_angle = std::move(x.m_delta_angle);
    m_delta_angle_available_ = x.m_delta_angle_available_;
    m_distance_m_ = x.m_distance_m_;
    m_distance_available_ = x.m_distance_available_;
    m_integration_timespan_us_ = x.m_integration_timespan_us_;
    m_quality_ = x.m_quality_;
    m_error_count_ = x.m_error_count_;
    m_max_flow_rate_ = x.m_max_flow_rate_;
    m_min_ground_distance_ = x.m_min_ground_distance_;
    m_max_ground_distance_ = x.m_max_ground_distance_;
    m_mode_ = x.m_mode_;

    return *this;
}

size_t sensor_optical_flow::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((2) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((3) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t sensor_optical_flow::getCdrSerializedSize(const sensor_optical_flow& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    if ((2) > 0)
    {
        current_alignment += ((2) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    if ((3) > 0)
    {
        current_alignment += ((3) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void sensor_optical_flow::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_timestamp_;
    scdr << m_timestamp_sample_;
    scdr << m_device_id_;
    scdr << m_pixel_flow;

    scdr << m_delta_angle;

    scdr << m_delta_angle_available_;
    scdr << m_distance_m_;
    scdr << m_distance_available_;
    scdr << m_integration_timespan_us_;
    scdr << m_quality_;
    scdr << m_error_count_;
    scdr << m_max_flow_rate_;
    scdr << m_min_ground_distance_;
    scdr << m_max_ground_distance_;
    scdr << m_mode_;
}

void sensor_optical_flow::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_timestamp_;
    dcdr >> m_timestamp_sample_;
    dcdr >> m_device_id_;
    dcdr >> m_pixel_flow;

    dcdr >> m_delta_angle;

    dcdr >> m_delta_angle_available_;
    dcdr >> m_distance_m_;
    dcdr >> m_distance_available_;
    dcdr >> m_integration_timespan_us_;
    dcdr >> m_quality_;
    dcdr >> m_error_count_;
    dcdr >> m_max_flow_rate_;
    dcdr >> m_min_ground_distance_;
    dcdr >> m_max_ground_distance_;
    dcdr >> m_mode_;
}

/*!
 * @brief This function sets a value in member timestamp_
 * @param _timestamp_ New value for member timestamp_
 */
void sensor_optical_flow::timestamp_(uint64_t _timestamp_)
{
m_timestamp_ = _timestamp_;
}

/*!
 * @brief This function returns the value of member timestamp_
 * @return Value of member timestamp_
 */
uint64_t sensor_optical_flow::timestamp_() const
{
    return m_timestamp_;
}

/*!
 * @brief This function returns a reference to member timestamp_
 * @return Reference to member timestamp_
 */
uint64_t& sensor_optical_flow::timestamp_()
{
    return m_timestamp_;
}

/*!
 * @brief This function sets a value in member timestamp_sample_
 * @param _timestamp_sample_ New value for member timestamp_sample_
 */
void sensor_optical_flow::timestamp_sample_(uint64_t _timestamp_sample_)
{
m_timestamp_sample_ = _timestamp_sample_;
}

/*!
 * @brief This function returns the value of member timestamp_sample_
 * @return Value of member timestamp_sample_
 */
uint64_t sensor_optical_flow::timestamp_sample_() const
{
    return m_timestamp_sample_;
}

/*!
 * @brief This function returns a reference to member timestamp_sample_
 * @return Reference to member timestamp_sample_
 */
uint64_t& sensor_optical_flow::timestamp_sample_()
{
    return m_timestamp_sample_;
}

/*!
 * @brief This function sets a value in member device_id_
 * @param _device_id_ New value for member device_id_
 */
void sensor_optical_flow::device_id_(uint32_t _device_id_)
{
m_device_id_ = _device_id_;
}

/*!
 * @brief This function returns the value of member device_id_
 * @return Value of member device_id_
 */
uint32_t sensor_optical_flow::device_id_() const
{
    return m_device_id_;
}

/*!
 * @brief This function returns a reference to member device_id_
 * @return Reference to member device_id_
 */
uint32_t& sensor_optical_flow::device_id_()
{
    return m_device_id_;
}

/*!
 * @brief This function copies the value in member pixel_flow
 * @param _pixel_flow New value to be copied in member pixel_flow
 */
void sensor_optical_flow::pixel_flow(const sensor_optical_flow__float_array_2 &_pixel_flow)
{
m_pixel_flow = _pixel_flow;
}

/*!
 * @brief This function moves the value in member pixel_flow
 * @param _pixel_flow New value to be moved in member pixel_flow
 */
void sensor_optical_flow::pixel_flow(sensor_optical_flow__float_array_2 &&_pixel_flow)
{
m_pixel_flow = std::move(_pixel_flow);
}

/*!
 * @brief This function returns a constant reference to member pixel_flow
 * @return Constant reference to member pixel_flow
 */
const sensor_optical_flow__float_array_2& sensor_optical_flow::pixel_flow() const
{
    return m_pixel_flow;
}

/*!
 * @brief This function returns a reference to member pixel_flow
 * @return Reference to member pixel_flow
 */
sensor_optical_flow__float_array_2& sensor_optical_flow::pixel_flow()
{
    return m_pixel_flow;
}
/*!
 * @brief This function copies the value in member delta_angle
 * @param _delta_angle New value to be copied in member delta_angle
 */
void sensor_optical_flow::delta_angle(const sensor_optical_flow__float_array_3 &_delta_angle)
{
m_delta_angle = _delta_angle;
}

/*!
 * @brief This function moves the value in member delta_angle
 * @param _delta_angle New value to be moved in member delta_angle
 */
void sensor_optical_flow::delta_angle(sensor_optical_flow__float_array_3 &&_delta_angle)
{
m_delta_angle = std::move(_delta_angle);
}

/*!
 * @brief This function returns a constant reference to member delta_angle
 * @return Constant reference to member delta_angle
 */
const sensor_optical_flow__float_array_3& sensor_optical_flow::delta_angle() const
{
    return m_delta_angle;
}

/*!
 * @brief This function returns a reference to member delta_angle
 * @return Reference to member delta_angle
 */
sensor_optical_flow__float_array_3& sensor_optical_flow::delta_angle()
{
    return m_delta_angle;
}
/*!
 * @brief This function sets a value in member delta_angle_available_
 * @param _delta_angle_available_ New value for member delta_angle_available_
 */
void sensor_optical_flow::delta_angle_available_(bool _delta_angle_available_)
{
m_delta_angle_available_ = _delta_angle_available_;
}

/*!
 * @brief This function returns the value of member delta_angle_available_
 * @return Value of member delta_angle_available_
 */
bool sensor_optical_flow::delta_angle_available_() const
{
    return m_delta_angle_available_;
}

/*!
 * @brief This function returns a reference to member delta_angle_available_
 * @return Reference to member delta_angle_available_
 */
bool& sensor_optical_flow::delta_angle_available_()
{
    return m_delta_angle_available_;
}

/*!
 * @brief This function sets a value in member distance_m_
 * @param _distance_m_ New value for member distance_m_
 */
void sensor_optical_flow::distance_m_(float _distance_m_)
{
m_distance_m_ = _distance_m_;
}

/*!
 * @brief This function returns the value of member distance_m_
 * @return Value of member distance_m_
 */
float sensor_optical_flow::distance_m_() const
{
    return m_distance_m_;
}

/*!
 * @brief This function returns a reference to member distance_m_
 * @return Reference to member distance_m_
 */
float& sensor_optical_flow::distance_m_()
{
    return m_distance_m_;
}

/*!
 * @brief This function sets a value in member distance_available_
 * @param _distance_available_ New value for member distance_available_
 */
void sensor_optical_flow::distance_available_(bool _distance_available_)
{
m_distance_available_ = _distance_available_;
}

/*!
 * @brief This function returns the value of member distance_available_
 * @return Value of member distance_available_
 */
bool sensor_optical_flow::distance_available_() const
{
    return m_distance_available_;
}

/*!
 * @brief This function returns a reference to member distance_available_
 * @return Reference to member distance_available_
 */
bool& sensor_optical_flow::distance_available_()
{
    return m_distance_available_;
}

/*!
 * @brief This function sets a value in member integration_timespan_us_
 * @param _integration_timespan_us_ New value for member integration_timespan_us_
 */
void sensor_optical_flow::integration_timespan_us_(uint32_t _integration_timespan_us_)
{
m_integration_timespan_us_ = _integration_timespan_us_;
}

/*!
 * @brief This function returns the value of member integration_timespan_us_
 * @return Value of member integration_timespan_us_
 */
uint32_t sensor_optical_flow::integration_timespan_us_() const
{
    return m_integration_timespan_us_;
}

/*!
 * @brief This function returns a reference to member integration_timespan_us_
 * @return Reference to member integration_timespan_us_
 */
uint32_t& sensor_optical_flow::integration_timespan_us_()
{
    return m_integration_timespan_us_;
}

/*!
 * @brief This function sets a value in member quality_
 * @param _quality_ New value for member quality_
 */
void sensor_optical_flow::quality_(uint8_t _quality_)
{
m_quality_ = _quality_;
}

/*!
 * @brief This function returns the value of member quality_
 * @return Value of member quality_
 */
uint8_t sensor_optical_flow::quality_() const
{
    return m_quality_;
}

/*!
 * @brief This function returns a reference to member quality_
 * @return Reference to member quality_
 */
uint8_t& sensor_optical_flow::quality_()
{
    return m_quality_;
}

/*!
 * @brief This function sets a value in member error_count_
 * @param _error_count_ New value for member error_count_
 */
void sensor_optical_flow::error_count_(uint32_t _error_count_)
{
m_error_count_ = _error_count_;
}

/*!
 * @brief This function returns the value of member error_count_
 * @return Value of member error_count_
 */
uint32_t sensor_optical_flow::error_count_() const
{
    return m_error_count_;
}

/*!
 * @brief This function returns a reference to member error_count_
 * @return Reference to member error_count_
 */
uint32_t& sensor_optical_flow::error_count_()
{
    return m_error_count_;
}

/*!
 * @brief This function sets a value in member max_flow_rate_
 * @param _max_flow_rate_ New value for member max_flow_rate_
 */
void sensor_optical_flow::max_flow_rate_(float _max_flow_rate_)
{
m_max_flow_rate_ = _max_flow_rate_;
}

/*!
 * @brief This function returns the value of member max_flow_rate_
 * @return Value of member max_flow_rate_
 */
float sensor_optical_flow::max_flow_rate_() const
{
    return m_max_flow_rate_;
}

/*!
 * @brief This function returns a reference to member max_flow_rate_
 * @return Reference to member max_flow_rate_
 */
float& sensor_optical_flow::max_flow_rate_()
{
    return m_max_flow_rate_;
}

/*!
 * @brief This function sets a value in member min_ground_distance_
 * @param _min_ground_distance_ New value for member min_ground_distance_
 */
void sensor_optical_flow::min_ground_distance_(float _min_ground_distance_)
{
m_min_ground_distance_ = _min_ground_distance_;
}

/*!
 * @brief This function returns the value of member min_ground_distance_
 * @return Value of member min_ground_distance_
 */
float sensor_optical_flow::min_ground_distance_() const
{
    return m_min_ground_distance_;
}

/*!
 * @brief This function returns a reference to member min_ground_distance_
 * @return Reference to member min_ground_distance_
 */
float& sensor_optical_flow::min_ground_distance_()
{
    return m_min_ground_distance_;
}

/*!
 * @brief This function sets a value in member max_ground_distance_
 * @param _max_ground_distance_ New value for member max_ground_distance_
 */
void sensor_optical_flow::max_ground_distance_(float _max_ground_distance_)
{
m_max_ground_distance_ = _max_ground_distance_;
}

/*!
 * @brief This function returns the value of member max_ground_distance_
 * @return Value of member max_ground_distance_
 */
float sensor_optical_flow::max_ground_distance_() const
{
    return m_max_ground_distance_;
}

/*!
 * @brief This function returns a reference to member max_ground_distance_
 * @return Reference to member max_ground_distance_
 */
float& sensor_optical_flow::max_ground_distance_()
{
    return m_max_ground_distance_;
}

/*!
 * @brief This function sets a value in member mode_
 * @param _mode_ New value for member mode_
 */
void sensor_optical_flow::mode_(uint8_t _mode_)
{
m_mode_ = _mode_;
}

/*!
 * @brief This function returns the value of member mode_
 * @return Value of member mode_
 */
uint8_t sensor_optical_flow::mode_() const
{
    return m_mode_;
}

/*!
 * @brief This function returns a reference to member mode_
 * @return Reference to member mode_
 */
uint8_t& sensor_optical_flow::mode_()
{
    return m_mode_;
}


size_t sensor_optical_flow::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;


















    return current_align;
}

bool sensor_optical_flow::isKeyDefined()
{
   return false;
}

void sensor_optical_flow::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
}
