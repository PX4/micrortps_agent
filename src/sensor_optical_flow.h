// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file sensor_optical_flow.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _SENSOR_OPTICAL_FLOW_H_
#define _SENSOR_OPTICAL_FLOW_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(sensor_optical_flow_SOURCE)
#define sensor_optical_flow_DllAPI __declspec( dllexport )
#else
#define sensor_optical_flow_DllAPI __declspec( dllimport )
#endif // sensor_optical_flow_SOURCE
#else
#define sensor_optical_flow_DllAPI
#endif
#else
#define sensor_optical_flow_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}


const uint8_t sensor_optical_flow__MODE_UNKNOWN = 0;
const uint8_t sensor_optical_flow__MODE_BRIGHT = 1;
const uint8_t sensor_optical_flow__MODE_LOWLIGHT = 2;
const uint8_t sensor_optical_flow__MODE_SUPER_LOWLIGHT = 3;
typedef std::array<float, 2> sensor_optical_flow__float_array_2;
typedef std::array<float, 3> sensor_optical_flow__float_array_3;
/*!
 * @brief This class represents the structure sensor_optical_flow defined by the user in the IDL file.
 * @ingroup SENSOR_OPTICAL_FLOW
 */
class sensor_optical_flow
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport sensor_optical_flow();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~sensor_optical_flow();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object sensor_optical_flow that will be copied.
     */
    eProsima_user_DllExport sensor_optical_flow(const sensor_optical_flow &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object sensor_optical_flow that will be copied.
     */
    eProsima_user_DllExport sensor_optical_flow(sensor_optical_flow &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object sensor_optical_flow that will be copied.
     */
    eProsima_user_DllExport sensor_optical_flow& operator=(const sensor_optical_flow &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object sensor_optical_flow that will be copied.
     */
    eProsima_user_DllExport sensor_optical_flow& operator=(sensor_optical_flow &&x);

    /*!
     * @brief This function sets a value in member timestamp_
     * @param _timestamp_ New value for member timestamp_
     */
    eProsima_user_DllExport void timestamp_(uint64_t _timestamp_);

    /*!
     * @brief This function returns the value of member timestamp_
     * @return Value of member timestamp_
     */
    eProsima_user_DllExport uint64_t timestamp_() const;

    /*!
     * @brief This function returns a reference to member timestamp_
     * @return Reference to member timestamp_
     */
    eProsima_user_DllExport uint64_t& timestamp_();

    /*!
     * @brief This function sets a value in member timestamp_sample_
     * @param _timestamp_sample_ New value for member timestamp_sample_
     */
    eProsima_user_DllExport void timestamp_sample_(uint64_t _timestamp_sample_);

    /*!
     * @brief This function returns the value of member timestamp_sample_
     * @return Value of member timestamp_sample_
     */
    eProsima_user_DllExport uint64_t timestamp_sample_() const;

    /*!
     * @brief This function returns a reference to member timestamp_sample_
     * @return Reference to member timestamp_sample_
     */
    eProsima_user_DllExport uint64_t& timestamp_sample_();

    /*!
     * @brief This function sets a value in member device_id_
     * @param _device_id_ New value for member device_id_
     */
    eProsima_user_DllExport void device_id_(uint32_t _device_id_);

    /*!
     * @brief This function returns the value of member device_id_
     * @return Value of member device_id_
     */
    eProsima_user_DllExport uint32_t device_id_() const;

    /*!
     * @brief This function returns a reference to member device_id_
     * @return Reference to member device_id_
     */
    eProsima_user_DllExport uint32_t& device_id_();

    /*!
     * @brief This function copies the value in member pixel_flow
     * @param _pixel_flow New value to be copied in member pixel_flow
     */
    eProsima_user_DllExport void pixel_flow(const sensor_optical_flow__float_array_2 &_pixel_flow);

    /*!
     * @brief This function moves the value in member pixel_flow
     * @param _pixel_flow New value to be moved in member pixel_flow
     */
    eProsima_user_DllExport void pixel_flow(sensor_optical_flow__float_array_2 &&_pixel_flow);

    /*!
     * @brief This function returns a constant reference to member pixel_flow
     * @return Constant reference to member pixel_flow
     */
    eProsima_user_DllExport const sensor_optical_flow__float_array_2& pixel_flow() const;

    /*!
     * @brief This function returns a reference to member pixel_flow
     * @return Reference to member pixel_flow
     */
    eProsima_user_DllExport sensor_optical_flow__float_array_2& pixel_flow();
    /*!
     * @brief This function copies the value in member delta_angle
     * @param _delta_angle New value to be copied in member delta_angle
     */
    eProsima_user_DllExport void delta_angle(const sensor_optical_flow__float_array_3 &_delta_angle);

    /*!
     * @brief This function moves the value in member delta_angle
     * @param _delta_angle New value to be moved in member delta_angle
     */
    eProsima_user_DllExport void delta_angle(sensor_optical_flow__float_array_3 &&_delta_angle);

    /*!
     * @brief This function returns a constant reference to member delta_angle
     * @return Constant reference to member delta_angle
     */
    eProsima_user_DllExport const sensor_optical_flow__float_array_3& delta_angle() const;

    /*!
     * @brief This function returns a reference to member delta_angle
     * @return Reference to member delta_angle
     */
    eProsima_user_DllExport sensor_optical_flow__float_array_3& delta_angle();
    /*!
     * @brief This function sets a value in member delta_angle_available_
     * @param _delta_angle_available_ New value for member delta_angle_available_
     */
    eProsima_user_DllExport void delta_angle_available_(bool _delta_angle_available_);

    /*!
     * @brief This function returns the value of member delta_angle_available_
     * @return Value of member delta_angle_available_
     */
    eProsima_user_DllExport bool delta_angle_available_() const;

    /*!
     * @brief This function returns a reference to member delta_angle_available_
     * @return Reference to member delta_angle_available_
     */
    eProsima_user_DllExport bool& delta_angle_available_();

    /*!
     * @brief This function sets a value in member distance_m_
     * @param _distance_m_ New value for member distance_m_
     */
    eProsima_user_DllExport void distance_m_(float _distance_m_);

    /*!
     * @brief This function returns the value of member distance_m_
     * @return Value of member distance_m_
     */
    eProsima_user_DllExport float distance_m_() const;

    /*!
     * @brief This function returns a reference to member distance_m_
     * @return Reference to member distance_m_
     */
    eProsima_user_DllExport float& distance_m_();

    /*!
     * @brief This function sets a value in member distance_available_
     * @param _distance_available_ New value for member distance_available_
     */
    eProsima_user_DllExport void distance_available_(bool _distance_available_);

    /*!
     * @brief This function returns the value of member distance_available_
     * @return Value of member distance_available_
     */
    eProsima_user_DllExport bool distance_available_() const;

    /*!
     * @brief This function returns a reference to member distance_available_
     * @return Reference to member distance_available_
     */
    eProsima_user_DllExport bool& distance_available_();

    /*!
     * @brief This function sets a value in member integration_timespan_us_
     * @param _integration_timespan_us_ New value for member integration_timespan_us_
     */
    eProsima_user_DllExport void integration_timespan_us_(uint32_t _integration_timespan_us_);

    /*!
     * @brief This function returns the value of member integration_timespan_us_
     * @return Value of member integration_timespan_us_
     */
    eProsima_user_DllExport uint32_t integration_timespan_us_() const;

    /*!
     * @brief This function returns a reference to member integration_timespan_us_
     * @return Reference to member integration_timespan_us_
     */
    eProsima_user_DllExport uint32_t& integration_timespan_us_();

    /*!
     * @brief This function sets a value in member quality_
     * @param _quality_ New value for member quality_
     */
    eProsima_user_DllExport void quality_(uint8_t _quality_);

    /*!
     * @brief This function returns the value of member quality_
     * @return Value of member quality_
     */
    eProsima_user_DllExport uint8_t quality_() const;

    /*!
     * @brief This function returns a reference to member quality_
     * @return Reference to member quality_
     */
    eProsima_user_DllExport uint8_t& quality_();

    /*!
     * @brief This function sets a value in member error_count_
     * @param _error_count_ New value for member error_count_
     */
    eProsima_user_DllExport void error_count_(uint32_t _error_count_);

    /*!
     * @brief This function returns the value of member error_count_
     * @return Value of member error_count_
     */
    eProsima_user_DllExport uint32_t error_count_() const;

    /*!
     * @brief This function returns a reference to member error_count_
     * @return Reference to member error_count_
     */
    eProsima_user_DllExport uint32_t& error_count_();

    /*!
     * @brief This function sets a value in member max_flow_rate_
     * @param _max_flow_rate_ New value for member max_flow_rate_
     */
    eProsima_user_DllExport void max_flow_rate_(float _max_flow_rate_);

    /*!
     * @brief This function returns the value of member max_flow_rate_
     * @return Value of member max_flow_rate_
     */
    eProsima_user_DllExport float max_flow_rate_() const;

    /*!
     * @brief This function returns a reference to member max_flow_rate_
     * @return Reference to member max_flow_rate_
     */
    eProsima_user_DllExport float& max_flow_rate_();

    /*!
     * @brief This function sets a value in member min_ground_distance_
     * @param _min_ground_distance_ New value for member min_ground_distance_
     */
    eProsima_user_DllExport void min_ground_distance_(float _min_ground_distance_);

    /*!
     * @brief This function returns the value of member min_ground_distance_
     * @return Value of member min_ground_distance_
     */
    eProsima_user_DllExport float min_ground_distance_() const;

    /*!
     * @brief This function returns a reference to member min_ground_distance_
     * @return Reference to member min_ground_distance_
     */
    eProsima_user_DllExport float& min_ground_distance_();

    /*!
     * @brief This function sets a value in member max_ground_distance_
     * @param _max_ground_distance_ New value for member max_ground_distance_
     */
    eProsima_user_DllExport void max_ground_distance_(float _max_ground_distance_);

    /*!
     * @brief This function returns the value of member max_ground_distance_
     * @return Value of member max_ground_distance_
     */
    eProsima_user_DllExport float max_ground_distance_() const;

    /*!
     * @brief This function returns a reference to member max_ground_distance_
     * @return Reference to member max_ground_distance_
     */
    eProsima_user_DllExport float& max_ground_distance_();

    /*!
     * @brief This function sets a value in member mode_
     * @param _mode_ New value for member mode_
     */
    eProsima_user_DllExport void mode_(uint8_t _mode_);

    /*!
     * @brief This function returns the value of member mode_
     * @return Value of member mode_
     */
    eProsima_user_DllExport uint8_t mode_() const;

    /*!
     * @brief This function returns a reference to member mode_
     * @return Reference to member mode_
     */
    eProsima_user_DllExport uint8_t& mode_();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const sensor_optical_flow& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    uint64_t m_timestamp_;
    uint64_t m_timestamp_sample_;
    uint32_t m_device_id_;
    sensor_optical_flow__float_array_2 m_pixel_flow;
    sensor_optical_flow__float_array_3 m_delta_angle;
    bool m_delta_angle_available_;
    float m_distance_m_;
    bool m_distance_available_;
    uint32_t m_integration_timespan_us_;
    uint8_t m_quality_;
    uint32_t m_error_count_;
    float m_max_flow_rate_;
    float m_min_ground_distance_;
    float m_max_ground_distance_;
    uint8_t m_mode_;
};

#endif // _SENSOR_OPTICAL_FLOW_H_