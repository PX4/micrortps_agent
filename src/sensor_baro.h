// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file sensor_baro.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _SENSOR_BARO_H_
#define _SENSOR_BARO_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(sensor_baro_SOURCE)
#define sensor_baro_DllAPI __declspec( dllexport )
#else
#define sensor_baro_DllAPI __declspec( dllimport )
#endif // sensor_baro_SOURCE
#else
#define sensor_baro_DllAPI
#endif
#else
#define sensor_baro_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}


/*!
 * @brief This class represents the structure sensor_baro defined by the user in the IDL file.
 * @ingroup SENSOR_BARO
 */
class sensor_baro
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport sensor_baro();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~sensor_baro();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object sensor_baro that will be copied.
     */
    eProsima_user_DllExport sensor_baro(const sensor_baro &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object sensor_baro that will be copied.
     */
    eProsima_user_DllExport sensor_baro(sensor_baro &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object sensor_baro that will be copied.
     */
    eProsima_user_DllExport sensor_baro& operator=(const sensor_baro &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object sensor_baro that will be copied.
     */
    eProsima_user_DllExport sensor_baro& operator=(sensor_baro &&x);

    /*!
     * @brief This function sets a value in member timestamp_
     * @param _timestamp_ New value for member timestamp_
     */
    eProsima_user_DllExport void timestamp_(uint64_t _timestamp_);

    /*!
     * @brief This function returns the value of member timestamp_
     * @return Value of member timestamp_
     */
    eProsima_user_DllExport uint64_t timestamp_() const;

    /*!
     * @brief This function returns a reference to member timestamp_
     * @return Reference to member timestamp_
     */
    eProsima_user_DllExport uint64_t& timestamp_();

    /*!
     * @brief This function sets a value in member timestamp_sample_
     * @param _timestamp_sample_ New value for member timestamp_sample_
     */
    eProsima_user_DllExport void timestamp_sample_(uint64_t _timestamp_sample_);

    /*!
     * @brief This function returns the value of member timestamp_sample_
     * @return Value of member timestamp_sample_
     */
    eProsima_user_DllExport uint64_t timestamp_sample_() const;

    /*!
     * @brief This function returns a reference to member timestamp_sample_
     * @return Reference to member timestamp_sample_
     */
    eProsima_user_DllExport uint64_t& timestamp_sample_();

    /*!
     * @brief This function sets a value in member device_id_
     * @param _device_id_ New value for member device_id_
     */
    eProsima_user_DllExport void device_id_(uint32_t _device_id_);

    /*!
     * @brief This function returns the value of member device_id_
     * @return Value of member device_id_
     */
    eProsima_user_DllExport uint32_t device_id_() const;

    /*!
     * @brief This function returns a reference to member device_id_
     * @return Reference to member device_id_
     */
    eProsima_user_DllExport uint32_t& device_id_();

    /*!
     * @brief This function sets a value in member error_count_
     * @param _error_count_ New value for member error_count_
     */
    eProsima_user_DllExport void error_count_(uint32_t _error_count_);

    /*!
     * @brief This function returns the value of member error_count_
     * @return Value of member error_count_
     */
    eProsima_user_DllExport uint32_t error_count_() const;

    /*!
     * @brief This function returns a reference to member error_count_
     * @return Reference to member error_count_
     */
    eProsima_user_DllExport uint32_t& error_count_();

    /*!
     * @brief This function sets a value in member pressure_
     * @param _pressure_ New value for member pressure_
     */
    eProsima_user_DllExport void pressure_(float _pressure_);

    /*!
     * @brief This function returns the value of member pressure_
     * @return Value of member pressure_
     */
    eProsima_user_DllExport float pressure_() const;

    /*!
     * @brief This function returns a reference to member pressure_
     * @return Reference to member pressure_
     */
    eProsima_user_DllExport float& pressure_();

    /*!
     * @brief This function sets a value in member temperature_
     * @param _temperature_ New value for member temperature_
     */
    eProsima_user_DllExport void temperature_(float _temperature_);

    /*!
     * @brief This function returns the value of member temperature_
     * @return Value of member temperature_
     */
    eProsima_user_DllExport float temperature_() const;

    /*!
     * @brief This function returns a reference to member temperature_
     * @return Reference to member temperature_
     */
    eProsima_user_DllExport float& temperature_();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const sensor_baro& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    uint64_t m_timestamp_;
    uint64_t m_timestamp_sample_;
    uint32_t m_device_id_;
    uint32_t m_error_count_;
    float m_pressure_;
    float m_temperature_;
};

#endif // _SENSOR_BARO_H_