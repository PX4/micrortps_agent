// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file radio_status.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _RADIO_STATUS_H_
#define _RADIO_STATUS_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(radio_status_SOURCE)
#define radio_status_DllAPI __declspec( dllexport )
#else
#define radio_status_DllAPI __declspec( dllimport )
#endif // radio_status_SOURCE
#else
#define radio_status_DllAPI
#endif
#else
#define radio_status_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}


/*!
 * @brief This class represents the structure radio_status defined by the user in the IDL file.
 * @ingroup RADIO_STATUS
 */
class radio_status
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport radio_status();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~radio_status();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object radio_status that will be copied.
     */
    eProsima_user_DllExport radio_status(const radio_status &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object radio_status that will be copied.
     */
    eProsima_user_DllExport radio_status(radio_status &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object radio_status that will be copied.
     */
    eProsima_user_DllExport radio_status& operator=(const radio_status &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object radio_status that will be copied.
     */
    eProsima_user_DllExport radio_status& operator=(radio_status &&x);

    /*!
     * @brief This function sets a value in member timestamp_
     * @param _timestamp_ New value for member timestamp_
     */
    eProsima_user_DllExport void timestamp_(uint64_t _timestamp_);

    /*!
     * @brief This function returns the value of member timestamp_
     * @return Value of member timestamp_
     */
    eProsima_user_DllExport uint64_t timestamp_() const;

    /*!
     * @brief This function returns a reference to member timestamp_
     * @return Reference to member timestamp_
     */
    eProsima_user_DllExport uint64_t& timestamp_();

    /*!
     * @brief This function sets a value in member rssi_
     * @param _rssi_ New value for member rssi_
     */
    eProsima_user_DllExport void rssi_(uint8_t _rssi_);

    /*!
     * @brief This function returns the value of member rssi_
     * @return Value of member rssi_
     */
    eProsima_user_DllExport uint8_t rssi_() const;

    /*!
     * @brief This function returns a reference to member rssi_
     * @return Reference to member rssi_
     */
    eProsima_user_DllExport uint8_t& rssi_();

    /*!
     * @brief This function sets a value in member remote_rssi_
     * @param _remote_rssi_ New value for member remote_rssi_
     */
    eProsima_user_DllExport void remote_rssi_(uint8_t _remote_rssi_);

    /*!
     * @brief This function returns the value of member remote_rssi_
     * @return Value of member remote_rssi_
     */
    eProsima_user_DllExport uint8_t remote_rssi_() const;

    /*!
     * @brief This function returns a reference to member remote_rssi_
     * @return Reference to member remote_rssi_
     */
    eProsima_user_DllExport uint8_t& remote_rssi_();

    /*!
     * @brief This function sets a value in member txbuf_
     * @param _txbuf_ New value for member txbuf_
     */
    eProsima_user_DllExport void txbuf_(uint8_t _txbuf_);

    /*!
     * @brief This function returns the value of member txbuf_
     * @return Value of member txbuf_
     */
    eProsima_user_DllExport uint8_t txbuf_() const;

    /*!
     * @brief This function returns a reference to member txbuf_
     * @return Reference to member txbuf_
     */
    eProsima_user_DllExport uint8_t& txbuf_();

    /*!
     * @brief This function sets a value in member noise_
     * @param _noise_ New value for member noise_
     */
    eProsima_user_DllExport void noise_(uint8_t _noise_);

    /*!
     * @brief This function returns the value of member noise_
     * @return Value of member noise_
     */
    eProsima_user_DllExport uint8_t noise_() const;

    /*!
     * @brief This function returns a reference to member noise_
     * @return Reference to member noise_
     */
    eProsima_user_DllExport uint8_t& noise_();

    /*!
     * @brief This function sets a value in member remote_noise_
     * @param _remote_noise_ New value for member remote_noise_
     */
    eProsima_user_DllExport void remote_noise_(uint8_t _remote_noise_);

    /*!
     * @brief This function returns the value of member remote_noise_
     * @return Value of member remote_noise_
     */
    eProsima_user_DllExport uint8_t remote_noise_() const;

    /*!
     * @brief This function returns a reference to member remote_noise_
     * @return Reference to member remote_noise_
     */
    eProsima_user_DllExport uint8_t& remote_noise_();

    /*!
     * @brief This function sets a value in member rxerrors_
     * @param _rxerrors_ New value for member rxerrors_
     */
    eProsima_user_DllExport void rxerrors_(uint16_t _rxerrors_);

    /*!
     * @brief This function returns the value of member rxerrors_
     * @return Value of member rxerrors_
     */
    eProsima_user_DllExport uint16_t rxerrors_() const;

    /*!
     * @brief This function returns a reference to member rxerrors_
     * @return Reference to member rxerrors_
     */
    eProsima_user_DllExport uint16_t& rxerrors_();

    /*!
     * @brief This function sets a value in member fix_
     * @param _fix_ New value for member fix_
     */
    eProsima_user_DllExport void fix_(uint16_t _fix_);

    /*!
     * @brief This function returns the value of member fix_
     * @return Value of member fix_
     */
    eProsima_user_DllExport uint16_t fix_() const;

    /*!
     * @brief This function returns a reference to member fix_
     * @return Reference to member fix_
     */
    eProsima_user_DllExport uint16_t& fix_();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const radio_status& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    uint64_t m_timestamp_;
    uint8_t m_rssi_;
    uint8_t m_remote_rssi_;
    uint8_t m_txbuf_;
    uint8_t m_noise_;
    uint8_t m_remote_noise_;
    uint16_t m_rxerrors_;
    uint16_t m_fix_;
};

#endif // _RADIO_STATUS_H_