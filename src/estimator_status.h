// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file estimator_status.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _ESTIMATOR_STATUS_H_
#define _ESTIMATOR_STATUS_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(estimator_status_SOURCE)
#define estimator_status_DllAPI __declspec( dllexport )
#else
#define estimator_status_DllAPI __declspec( dllimport )
#endif // estimator_status_SOURCE
#else
#define estimator_status_DllAPI
#endif
#else
#define estimator_status_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}


const uint8_t estimator_status__GPS_CHECK_FAIL_GPS_FIX = 0;
const uint8_t estimator_status__GPS_CHECK_FAIL_MIN_SAT_COUNT = 1;
const uint8_t estimator_status__GPS_CHECK_FAIL_MIN_PDOP = 2;
const uint8_t estimator_status__GPS_CHECK_FAIL_MAX_HORZ_ERR = 3;
const uint8_t estimator_status__GPS_CHECK_FAIL_MAX_VERT_ERR = 4;
const uint8_t estimator_status__GPS_CHECK_FAIL_MAX_SPD_ERR = 5;
const uint8_t estimator_status__GPS_CHECK_FAIL_MAX_HORZ_DRIFT = 6;
const uint8_t estimator_status__GPS_CHECK_FAIL_MAX_VERT_DRIFT = 7;
const uint8_t estimator_status__GPS_CHECK_FAIL_MAX_HORZ_SPD_ERR = 8;
const uint8_t estimator_status__GPS_CHECK_FAIL_MAX_VERT_SPD_ERR = 9;
const uint8_t estimator_status__CS_TILT_ALIGN = 0;
const uint8_t estimator_status__CS_YAW_ALIGN = 1;
const uint8_t estimator_status__CS_GPS = 2;
const uint8_t estimator_status__CS_OPT_FLOW = 3;
const uint8_t estimator_status__CS_MAG_HDG = 4;
const uint8_t estimator_status__CS_MAG_3D = 5;
const uint8_t estimator_status__CS_MAG_DEC = 6;
const uint8_t estimator_status__CS_IN_AIR = 7;
const uint8_t estimator_status__CS_WIND = 8;
const uint8_t estimator_status__CS_BARO_HGT = 9;
const uint8_t estimator_status__CS_RNG_HGT = 10;
const uint8_t estimator_status__CS_GPS_HGT = 11;
const uint8_t estimator_status__CS_EV_POS = 12;
const uint8_t estimator_status__CS_EV_YAW = 13;
const uint8_t estimator_status__CS_EV_HGT = 14;
const uint8_t estimator_status__CS_BETA = 15;
const uint8_t estimator_status__CS_MAG_FIELD = 16;
const uint8_t estimator_status__CS_FIXED_WING = 17;
const uint8_t estimator_status__CS_MAG_FAULT = 18;
const uint8_t estimator_status__CS_ASPD = 19;
const uint8_t estimator_status__CS_GND_EFFECT = 20;
const uint8_t estimator_status__CS_RNG_STUCK = 21;
const uint8_t estimator_status__CS_GPS_YAW = 22;
const uint8_t estimator_status__CS_MAG_ALIGNED = 23;
typedef std::array<float, 3> estimator_status__float_array_3;
typedef std::array<float, 24> estimator_status__float_array_24;
/*!
 * @brief This class represents the structure estimator_status defined by the user in the IDL file.
 * @ingroup ESTIMATOR_STATUS
 */
class estimator_status
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport estimator_status();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~estimator_status();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object estimator_status that will be copied.
     */
    eProsima_user_DllExport estimator_status(const estimator_status &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object estimator_status that will be copied.
     */
    eProsima_user_DllExport estimator_status(estimator_status &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object estimator_status that will be copied.
     */
    eProsima_user_DllExport estimator_status& operator=(const estimator_status &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object estimator_status that will be copied.
     */
    eProsima_user_DllExport estimator_status& operator=(estimator_status &&x);

    /*!
     * @brief This function sets a value in member timestamp_
     * @param _timestamp_ New value for member timestamp_
     */
    eProsima_user_DllExport void timestamp_(uint64_t _timestamp_);

    /*!
     * @brief This function returns the value of member timestamp_
     * @return Value of member timestamp_
     */
    eProsima_user_DllExport uint64_t timestamp_() const;

    /*!
     * @brief This function returns a reference to member timestamp_
     * @return Reference to member timestamp_
     */
    eProsima_user_DllExport uint64_t& timestamp_();

    /*!
     * @brief This function copies the value in member states
     * @param _states New value to be copied in member states
     */
    eProsima_user_DllExport void states(const estimator_status__float_array_24 &_states);

    /*!
     * @brief This function moves the value in member states
     * @param _states New value to be moved in member states
     */
    eProsima_user_DllExport void states(estimator_status__float_array_24 &&_states);

    /*!
     * @brief This function returns a constant reference to member states
     * @return Constant reference to member states
     */
    eProsima_user_DllExport const estimator_status__float_array_24& states() const;

    /*!
     * @brief This function returns a reference to member states
     * @return Reference to member states
     */
    eProsima_user_DllExport estimator_status__float_array_24& states();
    /*!
     * @brief This function sets a value in member n_states_
     * @param _n_states_ New value for member n_states_
     */
    eProsima_user_DllExport void n_states_(uint8_t _n_states_);

    /*!
     * @brief This function returns the value of member n_states_
     * @return Value of member n_states_
     */
    eProsima_user_DllExport uint8_t n_states_() const;

    /*!
     * @brief This function returns a reference to member n_states_
     * @return Reference to member n_states_
     */
    eProsima_user_DllExport uint8_t& n_states_();

    /*!
     * @brief This function copies the value in member vibe
     * @param _vibe New value to be copied in member vibe
     */
    eProsima_user_DllExport void vibe(const estimator_status__float_array_3 &_vibe);

    /*!
     * @brief This function moves the value in member vibe
     * @param _vibe New value to be moved in member vibe
     */
    eProsima_user_DllExport void vibe(estimator_status__float_array_3 &&_vibe);

    /*!
     * @brief This function returns a constant reference to member vibe
     * @return Constant reference to member vibe
     */
    eProsima_user_DllExport const estimator_status__float_array_3& vibe() const;

    /*!
     * @brief This function returns a reference to member vibe
     * @return Reference to member vibe
     */
    eProsima_user_DllExport estimator_status__float_array_3& vibe();
    /*!
     * @brief This function copies the value in member covariances
     * @param _covariances New value to be copied in member covariances
     */
    eProsima_user_DllExport void covariances(const estimator_status__float_array_24 &_covariances);

    /*!
     * @brief This function moves the value in member covariances
     * @param _covariances New value to be moved in member covariances
     */
    eProsima_user_DllExport void covariances(estimator_status__float_array_24 &&_covariances);

    /*!
     * @brief This function returns a constant reference to member covariances
     * @return Constant reference to member covariances
     */
    eProsima_user_DllExport const estimator_status__float_array_24& covariances() const;

    /*!
     * @brief This function returns a reference to member covariances
     * @return Reference to member covariances
     */
    eProsima_user_DllExport estimator_status__float_array_24& covariances();
    /*!
     * @brief This function copies the value in member output_tracking_error
     * @param _output_tracking_error New value to be copied in member output_tracking_error
     */
    eProsima_user_DllExport void output_tracking_error(const estimator_status__float_array_3 &_output_tracking_error);

    /*!
     * @brief This function moves the value in member output_tracking_error
     * @param _output_tracking_error New value to be moved in member output_tracking_error
     */
    eProsima_user_DllExport void output_tracking_error(estimator_status__float_array_3 &&_output_tracking_error);

    /*!
     * @brief This function returns a constant reference to member output_tracking_error
     * @return Constant reference to member output_tracking_error
     */
    eProsima_user_DllExport const estimator_status__float_array_3& output_tracking_error() const;

    /*!
     * @brief This function returns a reference to member output_tracking_error
     * @return Reference to member output_tracking_error
     */
    eProsima_user_DllExport estimator_status__float_array_3& output_tracking_error();
    /*!
     * @brief This function sets a value in member gps_check_fail_flags_
     * @param _gps_check_fail_flags_ New value for member gps_check_fail_flags_
     */
    eProsima_user_DllExport void gps_check_fail_flags_(uint16_t _gps_check_fail_flags_);

    /*!
     * @brief This function returns the value of member gps_check_fail_flags_
     * @return Value of member gps_check_fail_flags_
     */
    eProsima_user_DllExport uint16_t gps_check_fail_flags_() const;

    /*!
     * @brief This function returns a reference to member gps_check_fail_flags_
     * @return Reference to member gps_check_fail_flags_
     */
    eProsima_user_DllExport uint16_t& gps_check_fail_flags_();

    /*!
     * @brief This function sets a value in member control_mode_flags_
     * @param _control_mode_flags_ New value for member control_mode_flags_
     */
    eProsima_user_DllExport void control_mode_flags_(uint32_t _control_mode_flags_);

    /*!
     * @brief This function returns the value of member control_mode_flags_
     * @return Value of member control_mode_flags_
     */
    eProsima_user_DllExport uint32_t control_mode_flags_() const;

    /*!
     * @brief This function returns a reference to member control_mode_flags_
     * @return Reference to member control_mode_flags_
     */
    eProsima_user_DllExport uint32_t& control_mode_flags_();

    /*!
     * @brief This function sets a value in member filter_fault_flags_
     * @param _filter_fault_flags_ New value for member filter_fault_flags_
     */
    eProsima_user_DllExport void filter_fault_flags_(uint16_t _filter_fault_flags_);

    /*!
     * @brief This function returns the value of member filter_fault_flags_
     * @return Value of member filter_fault_flags_
     */
    eProsima_user_DllExport uint16_t filter_fault_flags_() const;

    /*!
     * @brief This function returns a reference to member filter_fault_flags_
     * @return Reference to member filter_fault_flags_
     */
    eProsima_user_DllExport uint16_t& filter_fault_flags_();

    /*!
     * @brief This function sets a value in member pos_horiz_accuracy_
     * @param _pos_horiz_accuracy_ New value for member pos_horiz_accuracy_
     */
    eProsima_user_DllExport void pos_horiz_accuracy_(float _pos_horiz_accuracy_);

    /*!
     * @brief This function returns the value of member pos_horiz_accuracy_
     * @return Value of member pos_horiz_accuracy_
     */
    eProsima_user_DllExport float pos_horiz_accuracy_() const;

    /*!
     * @brief This function returns a reference to member pos_horiz_accuracy_
     * @return Reference to member pos_horiz_accuracy_
     */
    eProsima_user_DllExport float& pos_horiz_accuracy_();

    /*!
     * @brief This function sets a value in member pos_vert_accuracy_
     * @param _pos_vert_accuracy_ New value for member pos_vert_accuracy_
     */
    eProsima_user_DllExport void pos_vert_accuracy_(float _pos_vert_accuracy_);

    /*!
     * @brief This function returns the value of member pos_vert_accuracy_
     * @return Value of member pos_vert_accuracy_
     */
    eProsima_user_DllExport float pos_vert_accuracy_() const;

    /*!
     * @brief This function returns a reference to member pos_vert_accuracy_
     * @return Reference to member pos_vert_accuracy_
     */
    eProsima_user_DllExport float& pos_vert_accuracy_();

    /*!
     * @brief This function sets a value in member innovation_check_flags_
     * @param _innovation_check_flags_ New value for member innovation_check_flags_
     */
    eProsima_user_DllExport void innovation_check_flags_(uint16_t _innovation_check_flags_);

    /*!
     * @brief This function returns the value of member innovation_check_flags_
     * @return Value of member innovation_check_flags_
     */
    eProsima_user_DllExport uint16_t innovation_check_flags_() const;

    /*!
     * @brief This function returns a reference to member innovation_check_flags_
     * @return Reference to member innovation_check_flags_
     */
    eProsima_user_DllExport uint16_t& innovation_check_flags_();

    /*!
     * @brief This function sets a value in member mag_test_ratio_
     * @param _mag_test_ratio_ New value for member mag_test_ratio_
     */
    eProsima_user_DllExport void mag_test_ratio_(float _mag_test_ratio_);

    /*!
     * @brief This function returns the value of member mag_test_ratio_
     * @return Value of member mag_test_ratio_
     */
    eProsima_user_DllExport float mag_test_ratio_() const;

    /*!
     * @brief This function returns a reference to member mag_test_ratio_
     * @return Reference to member mag_test_ratio_
     */
    eProsima_user_DllExport float& mag_test_ratio_();

    /*!
     * @brief This function sets a value in member vel_test_ratio_
     * @param _vel_test_ratio_ New value for member vel_test_ratio_
     */
    eProsima_user_DllExport void vel_test_ratio_(float _vel_test_ratio_);

    /*!
     * @brief This function returns the value of member vel_test_ratio_
     * @return Value of member vel_test_ratio_
     */
    eProsima_user_DllExport float vel_test_ratio_() const;

    /*!
     * @brief This function returns a reference to member vel_test_ratio_
     * @return Reference to member vel_test_ratio_
     */
    eProsima_user_DllExport float& vel_test_ratio_();

    /*!
     * @brief This function sets a value in member pos_test_ratio_
     * @param _pos_test_ratio_ New value for member pos_test_ratio_
     */
    eProsima_user_DllExport void pos_test_ratio_(float _pos_test_ratio_);

    /*!
     * @brief This function returns the value of member pos_test_ratio_
     * @return Value of member pos_test_ratio_
     */
    eProsima_user_DllExport float pos_test_ratio_() const;

    /*!
     * @brief This function returns a reference to member pos_test_ratio_
     * @return Reference to member pos_test_ratio_
     */
    eProsima_user_DllExport float& pos_test_ratio_();

    /*!
     * @brief This function sets a value in member hgt_test_ratio_
     * @param _hgt_test_ratio_ New value for member hgt_test_ratio_
     */
    eProsima_user_DllExport void hgt_test_ratio_(float _hgt_test_ratio_);

    /*!
     * @brief This function returns the value of member hgt_test_ratio_
     * @return Value of member hgt_test_ratio_
     */
    eProsima_user_DllExport float hgt_test_ratio_() const;

    /*!
     * @brief This function returns a reference to member hgt_test_ratio_
     * @return Reference to member hgt_test_ratio_
     */
    eProsima_user_DllExport float& hgt_test_ratio_();

    /*!
     * @brief This function sets a value in member tas_test_ratio_
     * @param _tas_test_ratio_ New value for member tas_test_ratio_
     */
    eProsima_user_DllExport void tas_test_ratio_(float _tas_test_ratio_);

    /*!
     * @brief This function returns the value of member tas_test_ratio_
     * @return Value of member tas_test_ratio_
     */
    eProsima_user_DllExport float tas_test_ratio_() const;

    /*!
     * @brief This function returns a reference to member tas_test_ratio_
     * @return Reference to member tas_test_ratio_
     */
    eProsima_user_DllExport float& tas_test_ratio_();

    /*!
     * @brief This function sets a value in member hagl_test_ratio_
     * @param _hagl_test_ratio_ New value for member hagl_test_ratio_
     */
    eProsima_user_DllExport void hagl_test_ratio_(float _hagl_test_ratio_);

    /*!
     * @brief This function returns the value of member hagl_test_ratio_
     * @return Value of member hagl_test_ratio_
     */
    eProsima_user_DllExport float hagl_test_ratio_() const;

    /*!
     * @brief This function returns a reference to member hagl_test_ratio_
     * @return Reference to member hagl_test_ratio_
     */
    eProsima_user_DllExport float& hagl_test_ratio_();

    /*!
     * @brief This function sets a value in member beta_test_ratio_
     * @param _beta_test_ratio_ New value for member beta_test_ratio_
     */
    eProsima_user_DllExport void beta_test_ratio_(float _beta_test_ratio_);

    /*!
     * @brief This function returns the value of member beta_test_ratio_
     * @return Value of member beta_test_ratio_
     */
    eProsima_user_DllExport float beta_test_ratio_() const;

    /*!
     * @brief This function returns a reference to member beta_test_ratio_
     * @return Reference to member beta_test_ratio_
     */
    eProsima_user_DllExport float& beta_test_ratio_();

    /*!
     * @brief This function sets a value in member solution_status_flags_
     * @param _solution_status_flags_ New value for member solution_status_flags_
     */
    eProsima_user_DllExport void solution_status_flags_(uint16_t _solution_status_flags_);

    /*!
     * @brief This function returns the value of member solution_status_flags_
     * @return Value of member solution_status_flags_
     */
    eProsima_user_DllExport uint16_t solution_status_flags_() const;

    /*!
     * @brief This function returns a reference to member solution_status_flags_
     * @return Reference to member solution_status_flags_
     */
    eProsima_user_DllExport uint16_t& solution_status_flags_();

    /*!
     * @brief This function sets a value in member time_slip_
     * @param _time_slip_ New value for member time_slip_
     */
    eProsima_user_DllExport void time_slip_(float _time_slip_);

    /*!
     * @brief This function returns the value of member time_slip_
     * @return Value of member time_slip_
     */
    eProsima_user_DllExport float time_slip_() const;

    /*!
     * @brief This function returns a reference to member time_slip_
     * @return Reference to member time_slip_
     */
    eProsima_user_DllExport float& time_slip_();

    /*!
     * @brief This function sets a value in member pre_flt_fail_innov_heading_
     * @param _pre_flt_fail_innov_heading_ New value for member pre_flt_fail_innov_heading_
     */
    eProsima_user_DllExport void pre_flt_fail_innov_heading_(bool _pre_flt_fail_innov_heading_);

    /*!
     * @brief This function returns the value of member pre_flt_fail_innov_heading_
     * @return Value of member pre_flt_fail_innov_heading_
     */
    eProsima_user_DllExport bool pre_flt_fail_innov_heading_() const;

    /*!
     * @brief This function returns a reference to member pre_flt_fail_innov_heading_
     * @return Reference to member pre_flt_fail_innov_heading_
     */
    eProsima_user_DllExport bool& pre_flt_fail_innov_heading_();

    /*!
     * @brief This function sets a value in member pre_flt_fail_innov_vel_horiz_
     * @param _pre_flt_fail_innov_vel_horiz_ New value for member pre_flt_fail_innov_vel_horiz_
     */
    eProsima_user_DllExport void pre_flt_fail_innov_vel_horiz_(bool _pre_flt_fail_innov_vel_horiz_);

    /*!
     * @brief This function returns the value of member pre_flt_fail_innov_vel_horiz_
     * @return Value of member pre_flt_fail_innov_vel_horiz_
     */
    eProsima_user_DllExport bool pre_flt_fail_innov_vel_horiz_() const;

    /*!
     * @brief This function returns a reference to member pre_flt_fail_innov_vel_horiz_
     * @return Reference to member pre_flt_fail_innov_vel_horiz_
     */
    eProsima_user_DllExport bool& pre_flt_fail_innov_vel_horiz_();

    /*!
     * @brief This function sets a value in member pre_flt_fail_innov_vel_vert_
     * @param _pre_flt_fail_innov_vel_vert_ New value for member pre_flt_fail_innov_vel_vert_
     */
    eProsima_user_DllExport void pre_flt_fail_innov_vel_vert_(bool _pre_flt_fail_innov_vel_vert_);

    /*!
     * @brief This function returns the value of member pre_flt_fail_innov_vel_vert_
     * @return Value of member pre_flt_fail_innov_vel_vert_
     */
    eProsima_user_DllExport bool pre_flt_fail_innov_vel_vert_() const;

    /*!
     * @brief This function returns a reference to member pre_flt_fail_innov_vel_vert_
     * @return Reference to member pre_flt_fail_innov_vel_vert_
     */
    eProsima_user_DllExport bool& pre_flt_fail_innov_vel_vert_();

    /*!
     * @brief This function sets a value in member pre_flt_fail_innov_height_
     * @param _pre_flt_fail_innov_height_ New value for member pre_flt_fail_innov_height_
     */
    eProsima_user_DllExport void pre_flt_fail_innov_height_(bool _pre_flt_fail_innov_height_);

    /*!
     * @brief This function returns the value of member pre_flt_fail_innov_height_
     * @return Value of member pre_flt_fail_innov_height_
     */
    eProsima_user_DllExport bool pre_flt_fail_innov_height_() const;

    /*!
     * @brief This function returns a reference to member pre_flt_fail_innov_height_
     * @return Reference to member pre_flt_fail_innov_height_
     */
    eProsima_user_DllExport bool& pre_flt_fail_innov_height_();

    /*!
     * @brief This function sets a value in member pre_flt_fail_mag_field_disturbed_
     * @param _pre_flt_fail_mag_field_disturbed_ New value for member pre_flt_fail_mag_field_disturbed_
     */
    eProsima_user_DllExport void pre_flt_fail_mag_field_disturbed_(bool _pre_flt_fail_mag_field_disturbed_);

    /*!
     * @brief This function returns the value of member pre_flt_fail_mag_field_disturbed_
     * @return Value of member pre_flt_fail_mag_field_disturbed_
     */
    eProsima_user_DllExport bool pre_flt_fail_mag_field_disturbed_() const;

    /*!
     * @brief This function returns a reference to member pre_flt_fail_mag_field_disturbed_
     * @return Reference to member pre_flt_fail_mag_field_disturbed_
     */
    eProsima_user_DllExport bool& pre_flt_fail_mag_field_disturbed_();

    /*!
     * @brief This function sets a value in member health_flags_
     * @param _health_flags_ New value for member health_flags_
     */
    eProsima_user_DllExport void health_flags_(uint8_t _health_flags_);

    /*!
     * @brief This function returns the value of member health_flags_
     * @return Value of member health_flags_
     */
    eProsima_user_DllExport uint8_t health_flags_() const;

    /*!
     * @brief This function returns a reference to member health_flags_
     * @return Reference to member health_flags_
     */
    eProsima_user_DllExport uint8_t& health_flags_();

    /*!
     * @brief This function sets a value in member timeout_flags_
     * @param _timeout_flags_ New value for member timeout_flags_
     */
    eProsima_user_DllExport void timeout_flags_(uint8_t _timeout_flags_);

    /*!
     * @brief This function returns the value of member timeout_flags_
     * @return Value of member timeout_flags_
     */
    eProsima_user_DllExport uint8_t timeout_flags_() const;

    /*!
     * @brief This function returns a reference to member timeout_flags_
     * @return Reference to member timeout_flags_
     */
    eProsima_user_DllExport uint8_t& timeout_flags_();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const estimator_status& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    uint64_t m_timestamp_;
    estimator_status__float_array_24 m_states;
    uint8_t m_n_states_;
    estimator_status__float_array_3 m_vibe;
    estimator_status__float_array_24 m_covariances;
    estimator_status__float_array_3 m_output_tracking_error;
    uint16_t m_gps_check_fail_flags_;
    uint32_t m_control_mode_flags_;
    uint16_t m_filter_fault_flags_;
    float m_pos_horiz_accuracy_;
    float m_pos_vert_accuracy_;
    uint16_t m_innovation_check_flags_;
    float m_mag_test_ratio_;
    float m_vel_test_ratio_;
    float m_pos_test_ratio_;
    float m_hgt_test_ratio_;
    float m_tas_test_ratio_;
    float m_hagl_test_ratio_;
    float m_beta_test_ratio_;
    uint16_t m_solution_status_flags_;
    float m_time_slip_;
    bool m_pre_flt_fail_innov_heading_;
    bool m_pre_flt_fail_innov_vel_horiz_;
    bool m_pre_flt_fail_innov_vel_vert_;
    bool m_pre_flt_fail_innov_height_;
    bool m_pre_flt_fail_mag_field_disturbed_;
    uint8_t m_health_flags_;
    uint8_t m_timeout_flags_;
};

#endif // _ESTIMATOR_STATUS_H_