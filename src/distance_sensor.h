// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file distance_sensor.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _DISTANCE_SENSOR_H_
#define _DISTANCE_SENSOR_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(distance_sensor_SOURCE)
#define distance_sensor_DllAPI __declspec( dllexport )
#else
#define distance_sensor_DllAPI __declspec( dllimport )
#endif // distance_sensor_SOURCE
#else
#define distance_sensor_DllAPI
#endif
#else
#define distance_sensor_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}


const uint8_t distance_sensor__MAV_DISTANCE_SENSOR_LASER = 0;
const uint8_t distance_sensor__MAV_DISTANCE_SENSOR_ULTRASOUND = 1;
const uint8_t distance_sensor__MAV_DISTANCE_SENSOR_INFRARED = 2;
const uint8_t distance_sensor__MAV_DISTANCE_SENSOR_RADAR = 3;
const uint8_t distance_sensor__ROTATION_YAW_0 = 0;
const uint8_t distance_sensor__ROTATION_YAW_45 = 1;
const uint8_t distance_sensor__ROTATION_YAW_90 = 2;
const uint8_t distance_sensor__ROTATION_YAW_135 = 3;
const uint8_t distance_sensor__ROTATION_YAW_180 = 4;
const uint8_t distance_sensor__ROTATION_YAW_225 = 5;
const uint8_t distance_sensor__ROTATION_YAW_270 = 6;
const uint8_t distance_sensor__ROTATION_YAW_315 = 7;
const uint8_t distance_sensor__ROTATION_FORWARD_FACING = 0;
const uint8_t distance_sensor__ROTATION_RIGHT_FACING = 2;
const uint8_t distance_sensor__ROTATION_BACKWARD_FACING = 4;
const uint8_t distance_sensor__ROTATION_LEFT_FACING = 6;
const uint8_t distance_sensor__ROTATION_UPWARD_FACING = 24;
const uint8_t distance_sensor__ROTATION_DOWNWARD_FACING = 25;
const uint8_t distance_sensor__ROTATION_CUSTOM = 100;
typedef std::array<float, 4> distance_sensor__float_array_4;
/*!
 * @brief This class represents the structure distance_sensor defined by the user in the IDL file.
 * @ingroup DISTANCE_SENSOR
 */
class distance_sensor
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport distance_sensor();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~distance_sensor();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object distance_sensor that will be copied.
     */
    eProsima_user_DllExport distance_sensor(const distance_sensor &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object distance_sensor that will be copied.
     */
    eProsima_user_DllExport distance_sensor(distance_sensor &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object distance_sensor that will be copied.
     */
    eProsima_user_DllExport distance_sensor& operator=(const distance_sensor &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object distance_sensor that will be copied.
     */
    eProsima_user_DllExport distance_sensor& operator=(distance_sensor &&x);

    /*!
     * @brief This function sets a value in member timestamp_
     * @param _timestamp_ New value for member timestamp_
     */
    eProsima_user_DllExport void timestamp_(uint64_t _timestamp_);

    /*!
     * @brief This function returns the value of member timestamp_
     * @return Value of member timestamp_
     */
    eProsima_user_DllExport uint64_t timestamp_() const;

    /*!
     * @brief This function returns a reference to member timestamp_
     * @return Reference to member timestamp_
     */
    eProsima_user_DllExport uint64_t& timestamp_();

    /*!
     * @brief This function sets a value in member min_distance_
     * @param _min_distance_ New value for member min_distance_
     */
    eProsima_user_DllExport void min_distance_(float _min_distance_);

    /*!
     * @brief This function returns the value of member min_distance_
     * @return Value of member min_distance_
     */
    eProsima_user_DllExport float min_distance_() const;

    /*!
     * @brief This function returns a reference to member min_distance_
     * @return Reference to member min_distance_
     */
    eProsima_user_DllExport float& min_distance_();

    /*!
     * @brief This function sets a value in member max_distance_
     * @param _max_distance_ New value for member max_distance_
     */
    eProsima_user_DllExport void max_distance_(float _max_distance_);

    /*!
     * @brief This function returns the value of member max_distance_
     * @return Value of member max_distance_
     */
    eProsima_user_DllExport float max_distance_() const;

    /*!
     * @brief This function returns a reference to member max_distance_
     * @return Reference to member max_distance_
     */
    eProsima_user_DllExport float& max_distance_();

    /*!
     * @brief This function sets a value in member current_distance_
     * @param _current_distance_ New value for member current_distance_
     */
    eProsima_user_DllExport void current_distance_(float _current_distance_);

    /*!
     * @brief This function returns the value of member current_distance_
     * @return Value of member current_distance_
     */
    eProsima_user_DllExport float current_distance_() const;

    /*!
     * @brief This function returns a reference to member current_distance_
     * @return Reference to member current_distance_
     */
    eProsima_user_DllExport float& current_distance_();

    /*!
     * @brief This function sets a value in member variance_
     * @param _variance_ New value for member variance_
     */
    eProsima_user_DllExport void variance_(float _variance_);

    /*!
     * @brief This function returns the value of member variance_
     * @return Value of member variance_
     */
    eProsima_user_DllExport float variance_() const;

    /*!
     * @brief This function returns a reference to member variance_
     * @return Reference to member variance_
     */
    eProsima_user_DllExport float& variance_();

    /*!
     * @brief This function sets a value in member signal_quality_
     * @param _signal_quality_ New value for member signal_quality_
     */
    eProsima_user_DllExport void signal_quality_(uint8_t _signal_quality_);

    /*!
     * @brief This function returns the value of member signal_quality_
     * @return Value of member signal_quality_
     */
    eProsima_user_DllExport uint8_t signal_quality_() const;

    /*!
     * @brief This function returns a reference to member signal_quality_
     * @return Reference to member signal_quality_
     */
    eProsima_user_DllExport uint8_t& signal_quality_();

    /*!
     * @brief This function sets a value in member type_
     * @param _type_ New value for member type_
     */
    eProsima_user_DllExport void type_(uint8_t _type_);

    /*!
     * @brief This function returns the value of member type_
     * @return Value of member type_
     */
    eProsima_user_DllExport uint8_t type_() const;

    /*!
     * @brief This function returns a reference to member type_
     * @return Reference to member type_
     */
    eProsima_user_DllExport uint8_t& type_();

    /*!
     * @brief This function sets a value in member id_
     * @param _id_ New value for member id_
     */
    eProsima_user_DllExport void id_(uint8_t _id_);

    /*!
     * @brief This function returns the value of member id_
     * @return Value of member id_
     */
    eProsima_user_DllExport uint8_t id_() const;

    /*!
     * @brief This function returns a reference to member id_
     * @return Reference to member id_
     */
    eProsima_user_DllExport uint8_t& id_();

    /*!
     * @brief This function sets a value in member h_fov_
     * @param _h_fov_ New value for member h_fov_
     */
    eProsima_user_DllExport void h_fov_(float _h_fov_);

    /*!
     * @brief This function returns the value of member h_fov_
     * @return Value of member h_fov_
     */
    eProsima_user_DllExport float h_fov_() const;

    /*!
     * @brief This function returns a reference to member h_fov_
     * @return Reference to member h_fov_
     */
    eProsima_user_DllExport float& h_fov_();

    /*!
     * @brief This function sets a value in member v_fov_
     * @param _v_fov_ New value for member v_fov_
     */
    eProsima_user_DllExport void v_fov_(float _v_fov_);

    /*!
     * @brief This function returns the value of member v_fov_
     * @return Value of member v_fov_
     */
    eProsima_user_DllExport float v_fov_() const;

    /*!
     * @brief This function returns a reference to member v_fov_
     * @return Reference to member v_fov_
     */
    eProsima_user_DllExport float& v_fov_();

    /*!
     * @brief This function copies the value in member q
     * @param _q New value to be copied in member q
     */
    eProsima_user_DllExport void q(const distance_sensor__float_array_4 &_q);

    /*!
     * @brief This function moves the value in member q
     * @param _q New value to be moved in member q
     */
    eProsima_user_DllExport void q(distance_sensor__float_array_4 &&_q);

    /*!
     * @brief This function returns a constant reference to member q
     * @return Constant reference to member q
     */
    eProsima_user_DllExport const distance_sensor__float_array_4& q() const;

    /*!
     * @brief This function returns a reference to member q
     * @return Reference to member q
     */
    eProsima_user_DllExport distance_sensor__float_array_4& q();
    /*!
     * @brief This function sets a value in member orientation_
     * @param _orientation_ New value for member orientation_
     */
    eProsima_user_DllExport void orientation_(uint8_t _orientation_);

    /*!
     * @brief This function returns the value of member orientation_
     * @return Value of member orientation_
     */
    eProsima_user_DllExport uint8_t orientation_() const;

    /*!
     * @brief This function returns a reference to member orientation_
     * @return Reference to member orientation_
     */
    eProsima_user_DllExport uint8_t& orientation_();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const distance_sensor& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    uint64_t m_timestamp_;
    float m_min_distance_;
    float m_max_distance_;
    float m_current_distance_;
    float m_variance_;
    uint8_t m_signal_quality_;
    uint8_t m_type_;
    uint8_t m_id_;
    float m_h_fov_;
    float m_v_fov_;
    distance_sensor__float_array_4 m_q;
    uint8_t m_orientation_;
};

#endif // _DISTANCE_SENSOR_H_