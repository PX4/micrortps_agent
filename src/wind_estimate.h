// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file wind_estimate.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _WIND_ESTIMATE_H_
#define _WIND_ESTIMATE_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(wind_estimate_SOURCE)
#define wind_estimate_DllAPI __declspec( dllexport )
#else
#define wind_estimate_DllAPI __declspec( dllimport )
#endif // wind_estimate_SOURCE
#else
#define wind_estimate_DllAPI
#endif
#else
#define wind_estimate_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}


/*!
 * @brief This class represents the structure wind_estimate defined by the user in the IDL file.
 * @ingroup WIND_ESTIMATE
 */
class wind_estimate
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport wind_estimate();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~wind_estimate();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object wind_estimate that will be copied.
     */
    eProsima_user_DllExport wind_estimate(const wind_estimate &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object wind_estimate that will be copied.
     */
    eProsima_user_DllExport wind_estimate(wind_estimate &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object wind_estimate that will be copied.
     */
    eProsima_user_DllExport wind_estimate& operator=(const wind_estimate &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object wind_estimate that will be copied.
     */
    eProsima_user_DllExport wind_estimate& operator=(wind_estimate &&x);

    /*!
     * @brief This function sets a value in member timestamp_
     * @param _timestamp_ New value for member timestamp_
     */
    eProsima_user_DllExport void timestamp_(uint64_t _timestamp_);

    /*!
     * @brief This function returns the value of member timestamp_
     * @return Value of member timestamp_
     */
    eProsima_user_DllExport uint64_t timestamp_() const;

    /*!
     * @brief This function returns a reference to member timestamp_
     * @return Reference to member timestamp_
     */
    eProsima_user_DllExport uint64_t& timestamp_();

    /*!
     * @brief This function sets a value in member windspeed_north_
     * @param _windspeed_north_ New value for member windspeed_north_
     */
    eProsima_user_DllExport void windspeed_north_(float _windspeed_north_);

    /*!
     * @brief This function returns the value of member windspeed_north_
     * @return Value of member windspeed_north_
     */
    eProsima_user_DllExport float windspeed_north_() const;

    /*!
     * @brief This function returns a reference to member windspeed_north_
     * @return Reference to member windspeed_north_
     */
    eProsima_user_DllExport float& windspeed_north_();

    /*!
     * @brief This function sets a value in member windspeed_east_
     * @param _windspeed_east_ New value for member windspeed_east_
     */
    eProsima_user_DllExport void windspeed_east_(float _windspeed_east_);

    /*!
     * @brief This function returns the value of member windspeed_east_
     * @return Value of member windspeed_east_
     */
    eProsima_user_DllExport float windspeed_east_() const;

    /*!
     * @brief This function returns a reference to member windspeed_east_
     * @return Reference to member windspeed_east_
     */
    eProsima_user_DllExport float& windspeed_east_();

    /*!
     * @brief This function sets a value in member variance_north_
     * @param _variance_north_ New value for member variance_north_
     */
    eProsima_user_DllExport void variance_north_(float _variance_north_);

    /*!
     * @brief This function returns the value of member variance_north_
     * @return Value of member variance_north_
     */
    eProsima_user_DllExport float variance_north_() const;

    /*!
     * @brief This function returns a reference to member variance_north_
     * @return Reference to member variance_north_
     */
    eProsima_user_DllExport float& variance_north_();

    /*!
     * @brief This function sets a value in member variance_east_
     * @param _variance_east_ New value for member variance_east_
     */
    eProsima_user_DllExport void variance_east_(float _variance_east_);

    /*!
     * @brief This function returns the value of member variance_east_
     * @return Value of member variance_east_
     */
    eProsima_user_DllExport float variance_east_() const;

    /*!
     * @brief This function returns a reference to member variance_east_
     * @return Reference to member variance_east_
     */
    eProsima_user_DllExport float& variance_east_();

    /*!
     * @brief This function sets a value in member tas_innov_
     * @param _tas_innov_ New value for member tas_innov_
     */
    eProsima_user_DllExport void tas_innov_(float _tas_innov_);

    /*!
     * @brief This function returns the value of member tas_innov_
     * @return Value of member tas_innov_
     */
    eProsima_user_DllExport float tas_innov_() const;

    /*!
     * @brief This function returns a reference to member tas_innov_
     * @return Reference to member tas_innov_
     */
    eProsima_user_DllExport float& tas_innov_();

    /*!
     * @brief This function sets a value in member tas_innov_var_
     * @param _tas_innov_var_ New value for member tas_innov_var_
     */
    eProsima_user_DllExport void tas_innov_var_(float _tas_innov_var_);

    /*!
     * @brief This function returns the value of member tas_innov_var_
     * @return Value of member tas_innov_var_
     */
    eProsima_user_DllExport float tas_innov_var_() const;

    /*!
     * @brief This function returns a reference to member tas_innov_var_
     * @return Reference to member tas_innov_var_
     */
    eProsima_user_DllExport float& tas_innov_var_();

    /*!
     * @brief This function sets a value in member tas_scale_
     * @param _tas_scale_ New value for member tas_scale_
     */
    eProsima_user_DllExport void tas_scale_(float _tas_scale_);

    /*!
     * @brief This function returns the value of member tas_scale_
     * @return Value of member tas_scale_
     */
    eProsima_user_DllExport float tas_scale_() const;

    /*!
     * @brief This function returns a reference to member tas_scale_
     * @return Reference to member tas_scale_
     */
    eProsima_user_DllExport float& tas_scale_();

    /*!
     * @brief This function sets a value in member beta_innov_
     * @param _beta_innov_ New value for member beta_innov_
     */
    eProsima_user_DllExport void beta_innov_(float _beta_innov_);

    /*!
     * @brief This function returns the value of member beta_innov_
     * @return Value of member beta_innov_
     */
    eProsima_user_DllExport float beta_innov_() const;

    /*!
     * @brief This function returns a reference to member beta_innov_
     * @return Reference to member beta_innov_
     */
    eProsima_user_DllExport float& beta_innov_();

    /*!
     * @brief This function sets a value in member beta_innov_var_
     * @param _beta_innov_var_ New value for member beta_innov_var_
     */
    eProsima_user_DllExport void beta_innov_var_(float _beta_innov_var_);

    /*!
     * @brief This function returns the value of member beta_innov_var_
     * @return Value of member beta_innov_var_
     */
    eProsima_user_DllExport float beta_innov_var_() const;

    /*!
     * @brief This function returns a reference to member beta_innov_var_
     * @return Reference to member beta_innov_var_
     */
    eProsima_user_DllExport float& beta_innov_var_();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const wind_estimate& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    uint64_t m_timestamp_;
    float m_windspeed_north_;
    float m_windspeed_east_;
    float m_variance_north_;
    float m_variance_east_;
    float m_tas_innov_;
    float m_tas_innov_var_;
    float m_tas_scale_;
    float m_beta_innov_;
    float m_beta_innov_var_;
};

#endif // _WIND_ESTIMATE_H_