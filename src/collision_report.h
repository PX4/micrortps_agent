// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file collision_report.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _COLLISION_REPORT_H_
#define _COLLISION_REPORT_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(collision_report_SOURCE)
#define collision_report_DllAPI __declspec( dllexport )
#else
#define collision_report_DllAPI __declspec( dllimport )
#endif // collision_report_SOURCE
#else
#define collision_report_DllAPI
#endif
#else
#define collision_report_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}


/*!
 * @brief This class represents the structure collision_report defined by the user in the IDL file.
 * @ingroup COLLISION_REPORT
 */
class collision_report
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport collision_report();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~collision_report();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object collision_report that will be copied.
     */
    eProsima_user_DllExport collision_report(const collision_report &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object collision_report that will be copied.
     */
    eProsima_user_DllExport collision_report(collision_report &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object collision_report that will be copied.
     */
    eProsima_user_DllExport collision_report& operator=(const collision_report &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object collision_report that will be copied.
     */
    eProsima_user_DllExport collision_report& operator=(collision_report &&x);

    /*!
     * @brief This function sets a value in member timestamp_
     * @param _timestamp_ New value for member timestamp_
     */
    eProsima_user_DllExport void timestamp_(uint64_t _timestamp_);

    /*!
     * @brief This function returns the value of member timestamp_
     * @return Value of member timestamp_
     */
    eProsima_user_DllExport uint64_t timestamp_() const;

    /*!
     * @brief This function returns a reference to member timestamp_
     * @return Reference to member timestamp_
     */
    eProsima_user_DllExport uint64_t& timestamp_();

    /*!
     * @brief This function sets a value in member src_
     * @param _src_ New value for member src_
     */
    eProsima_user_DllExport void src_(uint8_t _src_);

    /*!
     * @brief This function returns the value of member src_
     * @return Value of member src_
     */
    eProsima_user_DllExport uint8_t src_() const;

    /*!
     * @brief This function returns a reference to member src_
     * @return Reference to member src_
     */
    eProsima_user_DllExport uint8_t& src_();

    /*!
     * @brief This function sets a value in member id_
     * @param _id_ New value for member id_
     */
    eProsima_user_DllExport void id_(uint32_t _id_);

    /*!
     * @brief This function returns the value of member id_
     * @return Value of member id_
     */
    eProsima_user_DllExport uint32_t id_() const;

    /*!
     * @brief This function returns a reference to member id_
     * @return Reference to member id_
     */
    eProsima_user_DllExport uint32_t& id_();

    /*!
     * @brief This function sets a value in member action_
     * @param _action_ New value for member action_
     */
    eProsima_user_DllExport void action_(uint8_t _action_);

    /*!
     * @brief This function returns the value of member action_
     * @return Value of member action_
     */
    eProsima_user_DllExport uint8_t action_() const;

    /*!
     * @brief This function returns a reference to member action_
     * @return Reference to member action_
     */
    eProsima_user_DllExport uint8_t& action_();

    /*!
     * @brief This function sets a value in member threat_level_
     * @param _threat_level_ New value for member threat_level_
     */
    eProsima_user_DllExport void threat_level_(uint8_t _threat_level_);

    /*!
     * @brief This function returns the value of member threat_level_
     * @return Value of member threat_level_
     */
    eProsima_user_DllExport uint8_t threat_level_() const;

    /*!
     * @brief This function returns a reference to member threat_level_
     * @return Reference to member threat_level_
     */
    eProsima_user_DllExport uint8_t& threat_level_();

    /*!
     * @brief This function sets a value in member time_to_minimum_delta_
     * @param _time_to_minimum_delta_ New value for member time_to_minimum_delta_
     */
    eProsima_user_DllExport void time_to_minimum_delta_(float _time_to_minimum_delta_);

    /*!
     * @brief This function returns the value of member time_to_minimum_delta_
     * @return Value of member time_to_minimum_delta_
     */
    eProsima_user_DllExport float time_to_minimum_delta_() const;

    /*!
     * @brief This function returns a reference to member time_to_minimum_delta_
     * @return Reference to member time_to_minimum_delta_
     */
    eProsima_user_DllExport float& time_to_minimum_delta_();

    /*!
     * @brief This function sets a value in member altitude_minimum_delta_
     * @param _altitude_minimum_delta_ New value for member altitude_minimum_delta_
     */
    eProsima_user_DllExport void altitude_minimum_delta_(float _altitude_minimum_delta_);

    /*!
     * @brief This function returns the value of member altitude_minimum_delta_
     * @return Value of member altitude_minimum_delta_
     */
    eProsima_user_DllExport float altitude_minimum_delta_() const;

    /*!
     * @brief This function returns a reference to member altitude_minimum_delta_
     * @return Reference to member altitude_minimum_delta_
     */
    eProsima_user_DllExport float& altitude_minimum_delta_();

    /*!
     * @brief This function sets a value in member horizontal_minimum_delta_
     * @param _horizontal_minimum_delta_ New value for member horizontal_minimum_delta_
     */
    eProsima_user_DllExport void horizontal_minimum_delta_(float _horizontal_minimum_delta_);

    /*!
     * @brief This function returns the value of member horizontal_minimum_delta_
     * @return Value of member horizontal_minimum_delta_
     */
    eProsima_user_DllExport float horizontal_minimum_delta_() const;

    /*!
     * @brief This function returns a reference to member horizontal_minimum_delta_
     * @return Reference to member horizontal_minimum_delta_
     */
    eProsima_user_DllExport float& horizontal_minimum_delta_();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const collision_report& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    uint64_t m_timestamp_;
    uint8_t m_src_;
    uint32_t m_id_;
    uint8_t m_action_;
    uint8_t m_threat_level_;
    float m_time_to_minimum_delta_;
    float m_altitude_minimum_delta_;
    float m_horizontal_minimum_delta_;
};

#endif // _COLLISION_REPORT_H_