// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file debug_value.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "debug_value.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

debug_value::debug_value()
{
    // m_timestamp_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@57d5872c
    m_timestamp_ = 0;
    // m_ind_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@667a738
    m_ind_ = 0;
    // m_value_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@36f0f1be
    m_value_ = 0.0;

}

debug_value::~debug_value()
{



}

debug_value::debug_value(const debug_value &x)
{
    m_timestamp_ = x.m_timestamp_;
    m_ind_ = x.m_ind_;
    m_value_ = x.m_value_;
}

debug_value::debug_value(debug_value &&x)
{
    m_timestamp_ = x.m_timestamp_;
    m_ind_ = x.m_ind_;
    m_value_ = x.m_value_;
}

debug_value& debug_value::operator=(const debug_value &x)
{

    m_timestamp_ = x.m_timestamp_;
    m_ind_ = x.m_ind_;
    m_value_ = x.m_value_;

    return *this;
}

debug_value& debug_value::operator=(debug_value &&x)
{

    m_timestamp_ = x.m_timestamp_;
    m_ind_ = x.m_ind_;
    m_value_ = x.m_value_;

    return *this;
}

size_t debug_value::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t debug_value::getCdrSerializedSize(const debug_value& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void debug_value::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_timestamp_;
    scdr << m_ind_;
    scdr << m_value_;
}

void debug_value::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_timestamp_;
    dcdr >> m_ind_;
    dcdr >> m_value_;
}

/*!
 * @brief This function sets a value in member timestamp_
 * @param _timestamp_ New value for member timestamp_
 */
void debug_value::timestamp_(uint64_t _timestamp_)
{
m_timestamp_ = _timestamp_;
}

/*!
 * @brief This function returns the value of member timestamp_
 * @return Value of member timestamp_
 */
uint64_t debug_value::timestamp_() const
{
    return m_timestamp_;
}

/*!
 * @brief This function returns a reference to member timestamp_
 * @return Reference to member timestamp_
 */
uint64_t& debug_value::timestamp_()
{
    return m_timestamp_;
}

/*!
 * @brief This function sets a value in member ind_
 * @param _ind_ New value for member ind_
 */
void debug_value::ind_(uint8_t _ind_)
{
m_ind_ = _ind_;
}

/*!
 * @brief This function returns the value of member ind_
 * @return Value of member ind_
 */
uint8_t debug_value::ind_() const
{
    return m_ind_;
}

/*!
 * @brief This function returns a reference to member ind_
 * @return Reference to member ind_
 */
uint8_t& debug_value::ind_()
{
    return m_ind_;
}

/*!
 * @brief This function sets a value in member value_
 * @param _value_ New value for member value_
 */
void debug_value::value_(float _value_)
{
m_value_ = _value_;
}

/*!
 * @brief This function returns the value of member value_
 * @return Value of member value_
 */
float debug_value::value_() const
{
    return m_value_;
}

/*!
 * @brief This function returns a reference to member value_
 * @return Reference to member value_
 */
float& debug_value::value_()
{
    return m_value_;
}


size_t debug_value::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool debug_value::isKeyDefined()
{
   return false;
}

void debug_value::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
     
}
