// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file vehicle_rates_setpoint.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "vehicle_rates_setpoint.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


vehicle_rates_setpoint::vehicle_rates_setpoint()
{
    // m_timestamp_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@48fa0f47
    m_timestamp_ = 0;
    // m_roll_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6ac13091
    m_roll_ = 0.0;
    // m_pitch_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5e316c74
    m_pitch_ = 0.0;
    // m_yaw_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6d2a209c
    m_yaw_ = 0.0;
    // m_thrust_body com.eprosima.idl.parser.typecode.AliasTypeCode@75329a49
    memset(&m_thrust_body, 0, (3) * 4);

}

vehicle_rates_setpoint::~vehicle_rates_setpoint()
{





}

vehicle_rates_setpoint::vehicle_rates_setpoint(const vehicle_rates_setpoint &x)
{
    m_timestamp_ = x.m_timestamp_;
    m_roll_ = x.m_roll_;
    m_pitch_ = x.m_pitch_;
    m_yaw_ = x.m_yaw_;
    m_thrust_body = x.m_thrust_body;
}

vehicle_rates_setpoint::vehicle_rates_setpoint(vehicle_rates_setpoint &&x)
{
    m_timestamp_ = x.m_timestamp_;
    m_roll_ = x.m_roll_;
    m_pitch_ = x.m_pitch_;
    m_yaw_ = x.m_yaw_;
    m_thrust_body = std::move(x.m_thrust_body);
}

vehicle_rates_setpoint& vehicle_rates_setpoint::operator=(const vehicle_rates_setpoint &x)
{

    m_timestamp_ = x.m_timestamp_;
    m_roll_ = x.m_roll_;
    m_pitch_ = x.m_pitch_;
    m_yaw_ = x.m_yaw_;
    m_thrust_body = x.m_thrust_body;

    return *this;
}

vehicle_rates_setpoint& vehicle_rates_setpoint::operator=(vehicle_rates_setpoint &&x)
{

    m_timestamp_ = x.m_timestamp_;
    m_roll_ = x.m_roll_;
    m_pitch_ = x.m_pitch_;
    m_yaw_ = x.m_yaw_;
    m_thrust_body = std::move(x.m_thrust_body);

    return *this;
}

size_t vehicle_rates_setpoint::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((3) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t vehicle_rates_setpoint::getCdrSerializedSize(const vehicle_rates_setpoint& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    if ((3) > 0)
    {
        current_alignment += ((3) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }


    return current_alignment - initial_alignment;
}

void vehicle_rates_setpoint::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_timestamp_;
    scdr << m_roll_;
    scdr << m_pitch_;
    scdr << m_yaw_;
    scdr << m_thrust_body;

}

void vehicle_rates_setpoint::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_timestamp_;
    dcdr >> m_roll_;
    dcdr >> m_pitch_;
    dcdr >> m_yaw_;
    dcdr >> m_thrust_body;

}

/*!
 * @brief This function sets a value in member timestamp_
 * @param _timestamp_ New value for member timestamp_
 */
void vehicle_rates_setpoint::timestamp_(uint64_t _timestamp_)
{
m_timestamp_ = _timestamp_;
}

/*!
 * @brief This function returns the value of member timestamp_
 * @return Value of member timestamp_
 */
uint64_t vehicle_rates_setpoint::timestamp_() const
{
    return m_timestamp_;
}

/*!
 * @brief This function returns a reference to member timestamp_
 * @return Reference to member timestamp_
 */
uint64_t& vehicle_rates_setpoint::timestamp_()
{
    return m_timestamp_;
}

/*!
 * @brief This function sets a value in member roll_
 * @param _roll_ New value for member roll_
 */
void vehicle_rates_setpoint::roll_(float _roll_)
{
m_roll_ = _roll_;
}

/*!
 * @brief This function returns the value of member roll_
 * @return Value of member roll_
 */
float vehicle_rates_setpoint::roll_() const
{
    return m_roll_;
}

/*!
 * @brief This function returns a reference to member roll_
 * @return Reference to member roll_
 */
float& vehicle_rates_setpoint::roll_()
{
    return m_roll_;
}

/*!
 * @brief This function sets a value in member pitch_
 * @param _pitch_ New value for member pitch_
 */
void vehicle_rates_setpoint::pitch_(float _pitch_)
{
m_pitch_ = _pitch_;
}

/*!
 * @brief This function returns the value of member pitch_
 * @return Value of member pitch_
 */
float vehicle_rates_setpoint::pitch_() const
{
    return m_pitch_;
}

/*!
 * @brief This function returns a reference to member pitch_
 * @return Reference to member pitch_
 */
float& vehicle_rates_setpoint::pitch_()
{
    return m_pitch_;
}

/*!
 * @brief This function sets a value in member yaw_
 * @param _yaw_ New value for member yaw_
 */
void vehicle_rates_setpoint::yaw_(float _yaw_)
{
m_yaw_ = _yaw_;
}

/*!
 * @brief This function returns the value of member yaw_
 * @return Value of member yaw_
 */
float vehicle_rates_setpoint::yaw_() const
{
    return m_yaw_;
}

/*!
 * @brief This function returns a reference to member yaw_
 * @return Reference to member yaw_
 */
float& vehicle_rates_setpoint::yaw_()
{
    return m_yaw_;
}

/*!
 * @brief This function copies the value in member thrust_body
 * @param _thrust_body New value to be copied in member thrust_body
 */
void vehicle_rates_setpoint::thrust_body(const vehicle_rates_setpoint__float_array_3 &_thrust_body)
{
m_thrust_body = _thrust_body;
}

/*!
 * @brief This function moves the value in member thrust_body
 * @param _thrust_body New value to be moved in member thrust_body
 */
void vehicle_rates_setpoint::thrust_body(vehicle_rates_setpoint__float_array_3 &&_thrust_body)
{
m_thrust_body = std::move(_thrust_body);
}

/*!
 * @brief This function returns a constant reference to member thrust_body
 * @return Constant reference to member thrust_body
 */
const vehicle_rates_setpoint__float_array_3& vehicle_rates_setpoint::thrust_body() const
{
    return m_thrust_body;
}

/*!
 * @brief This function returns a reference to member thrust_body
 * @return Reference to member thrust_body
 */
vehicle_rates_setpoint__float_array_3& vehicle_rates_setpoint::thrust_body()
{
    return m_thrust_body;
}

size_t vehicle_rates_setpoint::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;








    return current_align;
}

bool vehicle_rates_setpoint::isKeyDefined()
{
   return false;
}

void vehicle_rates_setpoint::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
     
     
     
}
