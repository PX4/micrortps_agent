// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file vehicle_attitude_setpoint.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _VEHICLE_ATTITUDE_SETPOINT_H_
#define _VEHICLE_ATTITUDE_SETPOINT_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(vehicle_attitude_setpoint_SOURCE)
#define vehicle_attitude_setpoint_DllAPI __declspec( dllexport )
#else
#define vehicle_attitude_setpoint_DllAPI __declspec( dllimport )
#endif // vehicle_attitude_setpoint_SOURCE
#else
#define vehicle_attitude_setpoint_DllAPI
#endif
#else
#define vehicle_attitude_setpoint_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}


const uint8_t vehicle_attitude_setpoint__FLAPS_OFF = 0;
const uint8_t vehicle_attitude_setpoint__FLAPS_LAND = 1;
const uint8_t vehicle_attitude_setpoint__FLAPS_TAKEOFF = 2;
const uint8_t vehicle_attitude_setpoint__SPOILERS_OFF = 0;
const uint8_t vehicle_attitude_setpoint__SPOILERS_LAND = 1;
const uint8_t vehicle_attitude_setpoint__SPOILERS_DESCEND = 2;
typedef std::array<float, 4> vehicle_attitude_setpoint__float_array_4;
typedef std::array<float, 3> vehicle_attitude_setpoint__float_array_3;
/*!
 * @brief This class represents the structure vehicle_attitude_setpoint defined by the user in the IDL file.
 * @ingroup VEHICLE_ATTITUDE_SETPOINT
 */
class vehicle_attitude_setpoint
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport vehicle_attitude_setpoint();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~vehicle_attitude_setpoint();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object vehicle_attitude_setpoint that will be copied.
     */
    eProsima_user_DllExport vehicle_attitude_setpoint(const vehicle_attitude_setpoint &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object vehicle_attitude_setpoint that will be copied.
     */
    eProsima_user_DllExport vehicle_attitude_setpoint(vehicle_attitude_setpoint &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object vehicle_attitude_setpoint that will be copied.
     */
    eProsima_user_DllExport vehicle_attitude_setpoint& operator=(const vehicle_attitude_setpoint &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object vehicle_attitude_setpoint that will be copied.
     */
    eProsima_user_DllExport vehicle_attitude_setpoint& operator=(vehicle_attitude_setpoint &&x);

    /*!
     * @brief This function sets a value in member timestamp_
     * @param _timestamp_ New value for member timestamp_
     */
    eProsima_user_DllExport void timestamp_(uint64_t _timestamp_);

    /*!
     * @brief This function returns the value of member timestamp_
     * @return Value of member timestamp_
     */
    eProsima_user_DllExport uint64_t timestamp_() const;

    /*!
     * @brief This function returns a reference to member timestamp_
     * @return Reference to member timestamp_
     */
    eProsima_user_DllExport uint64_t& timestamp_();

    /*!
     * @brief This function sets a value in member roll_body_
     * @param _roll_body_ New value for member roll_body_
     */
    eProsima_user_DllExport void roll_body_(float _roll_body_);

    /*!
     * @brief This function returns the value of member roll_body_
     * @return Value of member roll_body_
     */
    eProsima_user_DllExport float roll_body_() const;

    /*!
     * @brief This function returns a reference to member roll_body_
     * @return Reference to member roll_body_
     */
    eProsima_user_DllExport float& roll_body_();

    /*!
     * @brief This function sets a value in member pitch_body_
     * @param _pitch_body_ New value for member pitch_body_
     */
    eProsima_user_DllExport void pitch_body_(float _pitch_body_);

    /*!
     * @brief This function returns the value of member pitch_body_
     * @return Value of member pitch_body_
     */
    eProsima_user_DllExport float pitch_body_() const;

    /*!
     * @brief This function returns a reference to member pitch_body_
     * @return Reference to member pitch_body_
     */
    eProsima_user_DllExport float& pitch_body_();

    /*!
     * @brief This function sets a value in member yaw_body_
     * @param _yaw_body_ New value for member yaw_body_
     */
    eProsima_user_DllExport void yaw_body_(float _yaw_body_);

    /*!
     * @brief This function returns the value of member yaw_body_
     * @return Value of member yaw_body_
     */
    eProsima_user_DllExport float yaw_body_() const;

    /*!
     * @brief This function returns a reference to member yaw_body_
     * @return Reference to member yaw_body_
     */
    eProsima_user_DllExport float& yaw_body_();

    /*!
     * @brief This function sets a value in member yaw_sp_move_rate_
     * @param _yaw_sp_move_rate_ New value for member yaw_sp_move_rate_
     */
    eProsima_user_DllExport void yaw_sp_move_rate_(float _yaw_sp_move_rate_);

    /*!
     * @brief This function returns the value of member yaw_sp_move_rate_
     * @return Value of member yaw_sp_move_rate_
     */
    eProsima_user_DllExport float yaw_sp_move_rate_() const;

    /*!
     * @brief This function returns a reference to member yaw_sp_move_rate_
     * @return Reference to member yaw_sp_move_rate_
     */
    eProsima_user_DllExport float& yaw_sp_move_rate_();

    /*!
     * @brief This function copies the value in member q_d
     * @param _q_d New value to be copied in member q_d
     */
    eProsima_user_DllExport void q_d(const vehicle_attitude_setpoint__float_array_4 &_q_d);

    /*!
     * @brief This function moves the value in member q_d
     * @param _q_d New value to be moved in member q_d
     */
    eProsima_user_DllExport void q_d(vehicle_attitude_setpoint__float_array_4 &&_q_d);

    /*!
     * @brief This function returns a constant reference to member q_d
     * @return Constant reference to member q_d
     */
    eProsima_user_DllExport const vehicle_attitude_setpoint__float_array_4& q_d() const;

    /*!
     * @brief This function returns a reference to member q_d
     * @return Reference to member q_d
     */
    eProsima_user_DllExport vehicle_attitude_setpoint__float_array_4& q_d();
    /*!
     * @brief This function copies the value in member thrust_body
     * @param _thrust_body New value to be copied in member thrust_body
     */
    eProsima_user_DllExport void thrust_body(const vehicle_attitude_setpoint__float_array_3 &_thrust_body);

    /*!
     * @brief This function moves the value in member thrust_body
     * @param _thrust_body New value to be moved in member thrust_body
     */
    eProsima_user_DllExport void thrust_body(vehicle_attitude_setpoint__float_array_3 &&_thrust_body);

    /*!
     * @brief This function returns a constant reference to member thrust_body
     * @return Constant reference to member thrust_body
     */
    eProsima_user_DllExport const vehicle_attitude_setpoint__float_array_3& thrust_body() const;

    /*!
     * @brief This function returns a reference to member thrust_body
     * @return Reference to member thrust_body
     */
    eProsima_user_DllExport vehicle_attitude_setpoint__float_array_3& thrust_body();
    /*!
     * @brief This function sets a value in member reset_rate_integrals_
     * @param _reset_rate_integrals_ New value for member reset_rate_integrals_
     */
    eProsima_user_DllExport void reset_rate_integrals_(bool _reset_rate_integrals_);

    /*!
     * @brief This function returns the value of member reset_rate_integrals_
     * @return Value of member reset_rate_integrals_
     */
    eProsima_user_DllExport bool reset_rate_integrals_() const;

    /*!
     * @brief This function returns a reference to member reset_rate_integrals_
     * @return Reference to member reset_rate_integrals_
     */
    eProsima_user_DllExport bool& reset_rate_integrals_();

    /*!
     * @brief This function sets a value in member fw_control_yaw_
     * @param _fw_control_yaw_ New value for member fw_control_yaw_
     */
    eProsima_user_DllExport void fw_control_yaw_(bool _fw_control_yaw_);

    /*!
     * @brief This function returns the value of member fw_control_yaw_
     * @return Value of member fw_control_yaw_
     */
    eProsima_user_DllExport bool fw_control_yaw_() const;

    /*!
     * @brief This function returns a reference to member fw_control_yaw_
     * @return Reference to member fw_control_yaw_
     */
    eProsima_user_DllExport bool& fw_control_yaw_();

    /*!
     * @brief This function sets a value in member apply_flaps_
     * @param _apply_flaps_ New value for member apply_flaps_
     */
    eProsima_user_DllExport void apply_flaps_(uint8_t _apply_flaps_);

    /*!
     * @brief This function returns the value of member apply_flaps_
     * @return Value of member apply_flaps_
     */
    eProsima_user_DllExport uint8_t apply_flaps_() const;

    /*!
     * @brief This function returns a reference to member apply_flaps_
     * @return Reference to member apply_flaps_
     */
    eProsima_user_DllExport uint8_t& apply_flaps_();

    /*!
     * @brief This function sets a value in member apply_spoilers_
     * @param _apply_spoilers_ New value for member apply_spoilers_
     */
    eProsima_user_DllExport void apply_spoilers_(uint8_t _apply_spoilers_);

    /*!
     * @brief This function returns the value of member apply_spoilers_
     * @return Value of member apply_spoilers_
     */
    eProsima_user_DllExport uint8_t apply_spoilers_() const;

    /*!
     * @brief This function returns a reference to member apply_spoilers_
     * @return Reference to member apply_spoilers_
     */
    eProsima_user_DllExport uint8_t& apply_spoilers_();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const vehicle_attitude_setpoint& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    uint64_t m_timestamp_;
    float m_roll_body_;
    float m_pitch_body_;
    float m_yaw_body_;
    float m_yaw_sp_move_rate_;
    vehicle_attitude_setpoint__float_array_4 m_q_d;
    vehicle_attitude_setpoint__float_array_3 m_thrust_body;
    bool m_reset_rate_integrals_;
    bool m_fw_control_yaw_;
    uint8_t m_apply_flaps_;
    uint8_t m_apply_spoilers_;
};

#endif // _VEHICLE_ATTITUDE_SETPOINT_H_